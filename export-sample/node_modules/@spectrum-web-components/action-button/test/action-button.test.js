"use strict";
import "@spectrum-web-components/action-button/sp-action-button.js";
import {
  LONGPRESS_DURATION
} from "@spectrum-web-components/action-button";
import {
  aTimeout,
  elementUpdated,
  expect,
  fixture,
  html,
  waitUntil
} from "@open-wc/testing";
import { sendKeys } from "@web/test-runner-commands";
import { spy } from "sinon";
import { testForLitDevWarnings } from "../../../test/testing-helpers.js";
import { m as BlackActionButton } from "../stories/action-button-black.stories.js";
describe("ActionButton", () => {
  testForLitDevWarnings(
    async () => await fixture(
      BlackActionButton(BlackActionButton.args)
    )
  );
  it("loads default", async () => {
    const el = await fixture(
      html`
                <sp-action-button>Button</sp-action-button>
            `
    );
    await elementUpdated(el);
    expect(el).to.not.be.undefined;
    expect(el.textContent).to.include("Button");
    await expect(el).to.be.accessible();
  });
  it("loads [hold-affordance]", async () => {
    const el = await fixture(
      html`
                <sp-action-button hold-affordance>Button</sp-action-button>
            `
    );
    await elementUpdated(el);
    expect(el).to.not.be.undefined;
    expect(el.textContent).to.include("Button");
    await expect(el).to.be.accessible();
  });
  it("manages a `tabindex`", async () => {
    const el = await fixture(
      html`
                <sp-action-button>Button</sp-action-button>
            `
    );
    expect(el.tabIndex).to.equal(0);
    expect(el.disabled).to.be.false;
    el.setAttribute("tabindex", "-1");
    await elementUpdated(el);
    expect(el.tabIndex).to.equal(-1);
    expect(el.disabled).to.be.false;
    el.disabled = true;
    await elementUpdated(el);
    expect(el.tabIndex).to.equal(-1);
    expect(el.disabled).to.be.true;
    el.disabled = false;
    await elementUpdated(el);
    expect(el.tabIndex).to.equal(-1);
    expect(el.disabled).to.be.false;
  });
  it("maintains a `size` attribute", async () => {
    const el = await fixture(
      html`
                <sp-action-button>Button</sp-action-button>
            `
    );
    await elementUpdated(el);
    expect(el.size).to.equal("m");
    expect(el.getAttribute("size")).to.equal("m");
    el.removeAttribute("size");
    await elementUpdated(el);
    expect(el.size).to.equal("m");
    expect(el.getAttribute("size")).to.equal("m");
  });
  it("dispatches `longpress` events when [hold-affordance]", async () => {
    const longpressSpy = spy();
    const el = await fixture(
      html`
                <sp-action-button
                    hold-affordance
                    @longpress=${() => longpressSpy()}
                >
                    Button
                </sp-action-button>
            `
    );
    await elementUpdated(el);
    el.focus();
    await sendKeys({
      press: "Space"
    });
    expect(longpressSpy.callCount).to.equal(1);
    await sendKeys({
      press: "Alt+ArrowDown"
    });
    expect(longpressSpy.callCount).to.equal(2);
    el.dispatchEvent(new PointerEvent("pointerdown", { button: 0 }));
    el.dispatchEvent(new PointerEvent("pointerup"));
    el.dispatchEvent(new PointerEvent("pointerdown", { button: 0 }));
    await waitUntil(() => longpressSpy.callCount === 3);
  });
  it('does not dispatch `longpress` events when "right click"ed', async () => {
    const longpressSpy = spy();
    const el = await fixture(
      html`
                <sp-action-button
                    hold-affordance
                    @longpress=${() => longpressSpy()}
                >
                    Button
                </sp-action-button>
            `
    );
    await elementUpdated(el);
    expect(longpressSpy.callCount).to.equal(0);
    el.focus();
    el.dispatchEvent(new PointerEvent("pointerdown", { button: 1 }));
    await aTimeout(2 * LONGPRESS_DURATION);
    expect(longpressSpy.callCount).to.equal(0);
  });
  it(":not([toggles])", async () => {
    const el = await fixture(
      html`
                <sp-action-button>Button</sp-action-button>
            `
    );
    await elementUpdated(el);
    const button = el.focusElement;
    expect(el.toggles).to.be.false;
    expect(el.selected).to.be.false;
    expect(button.hasAttribute("aria-pressed")).to.be.false;
    el.click();
    await elementUpdated(el);
    expect(el.toggles).to.be.false;
    expect(el.selected).to.be.false;
    expect(button.hasAttribute("aria-pressed")).to.be.false;
  });
  it("responds to [selected]", async () => {
    const el = await fixture(
      html`
                <sp-action-button>Button</sp-action-button>
            `
    );
    await elementUpdated(el);
    const button = el.focusElement;
    expect(el.toggles).to.be.false;
    expect(el.selected).to.be.false;
    expect(button.hasAttribute("aria-pressed")).to.be.false;
    el.selected = true;
    await elementUpdated(el);
    expect(el.toggles).to.be.false;
    expect(el.selected).to.be.true;
    expect(button.getAttribute("aria-pressed")).to.equal("true");
    el.selected = false;
    await elementUpdated(el);
    expect(el.toggles).to.be.false;
    expect(el.selected).to.be.false;
    expect(button.hasAttribute("aria-pressed")).to.be.false;
  });
  it("toggles", async () => {
    const el = await fixture(
      html`
                <sp-action-button toggles>Button</sp-action-button>
            `
    );
    await elementUpdated(el);
    const button = el.focusElement;
    expect(el.toggles).to.be.true;
    expect(el.selected).to.be.false;
    expect(button.getAttribute("aria-pressed")).to.equal("false");
    el.focus();
    await sendKeys({
      press: "Space"
    });
    await elementUpdated(el);
    expect(el.toggles).to.be.true;
    expect(el.selected).to.be.true;
    expect(button.getAttribute("aria-pressed")).to.equal("true");
    el.addEventListener("change", (event) => event.preventDefault());
    el.click();
    await elementUpdated(el);
    expect(el.toggles).to.be.true;
    expect(el.selected).to.be.true;
    expect(button.getAttribute("aria-pressed")).to.equal("true");
  });
});
//# sourceMappingURL=action-button.test.js.map
