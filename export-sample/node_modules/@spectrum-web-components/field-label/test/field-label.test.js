import{elementUpdated as a,expect as i,fixture as s,html as o}from"@open-wc/testing";import{stub as n}from"sinon";import"@spectrum-web-components/textfield/sp-textfield.js";import"@spectrum-web-components/picker/sp-picker.js";import"@spectrum-web-components/menu/sp-menu.js";import"@spectrum-web-components/menu/sp-menu-item.js";import"@spectrum-web-components/field-label/sp-field-label.js";import{FieldLabel as d}from"@spectrum-web-components/field-label";import{testForLitDevWarnings as c}from"../../../test/testing-helpers.js";describe("FieldLabel",()=>{c(async()=>await s(o`
                    <div>
                        <sp-field-label for="test">Input label</sp-field-label>
                        <input id="test" />
                    </div>
                `)),it("loads default field-label accessibly",async()=>{const e=await s(o`
                <div>
                    <sp-field-label for="test">Input label</sp-field-label>
                    <input id="test" />
                </div>
            `);await a(e),await i(e).to.be.accessible()}),it("loads [required] field-label accessibly",async()=>{const e=await s(o`
                <div>
                    <sp-field-label required for="test">
                        Required input label
                    </sp-field-label>
                    <input id="test" />
                </div>
            `);await a(e),await i(e).to.be.accessible()}),it('loads with no "for"',async()=>{const e=await s(o`
                <sp-field-label>Input label</sp-field-label>
            `);await a(e),await i(e).to.be.accessible()}),it('allows unfulfilled "for"',async()=>{const e=await s(o`
                <sp-field-label>Input label</sp-field-label>
            `);await a(e);const t=n(e,"manageFor");t.callsFake(async(...r)=>{try{await d.prototype.manageFor.apply(e,...r)}catch(p){return"Error was thrown."}return"No error was thrown."}),e.for="not-available",await a(e);const l=await t.returnValues[0];i(l).to.equal("No error was thrown.")}),it('associates itself to an element whose "id" matches its "for" attribute',async()=>{const e=await s(o`
                <div>
                    <sp-field-label required for="test"></sp-field-label>
                    <input id="test" />
                </div>
            `),t=e.querySelector("sp-field-label"),l=e.querySelector("input");await a(t),i(l.hasAttribute("aria-labelledby")),i(l.getAttribute("aria-labelledby")).to.equal(t.id)}),it("passed clicks to assiciated form element as focus",async()=>{const e=await s(o`
                <div>
                    <sp-field-label required for="test"></sp-field-label>
                    <input id="test" />
                </div>
            `),t=e.querySelector("sp-field-label"),l=e.querySelector("input");await a(t),t.click(),await a(t),i(document.activeElement).to.equal(l)}),it('associates itself to an element with a focueElement whose "id" matches its "for" attribute',async()=>{const e=await s(o`
                <div>
                    <sp-field-label required for="test"></sp-field-label>
                    <sp-textfield id="test"></sp-textfield>
                </div>
            `),t=e.querySelector("sp-field-label"),l=e.querySelector("sp-textfield").focusElement;await a(t),i(l.hasAttribute("aria-label")),i(l.getAttribute("aria-label")).to.equal((t.textContent||"").trim())}),it("passed clicks to assiciated form element with a focueElement as focus",async()=>{const e=await s(o`
                <div>
                    <sp-field-label required for="test"></sp-field-label>
                    <sp-textfield id="test"></sp-textfield>
                </div>
            `),t=e.querySelector("sp-field-label"),l=e.querySelector("sp-textfield");await a(t),t.click(),await a(t),i(document.activeElement).to.equal(l)}),it("forces focus visible when available",async()=>{const e=await s(o`
                <div>
                    <sp-field-label required for="test"></sp-field-label>
                    <sp-picker id="test">
                        <sp-menu-item>Test</sp-menu-item>
                    </sp-picker>
                </div>
            `),t=e.querySelector("sp-field-label"),l=e.querySelector("sp-picker");await a(t),await a(l),i(l.focused).to.be.false,t.click(),await a(t),await a(l),i(document.activeElement).to.equal(l),i(l.focused).to.be.true})});
//# sourceMappingURL=field-label.test.js.map
