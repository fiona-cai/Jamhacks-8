{
  "version": 3,
  "sources": ["field-label.test.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { elementUpdated, expect, fixture, html } from '@open-wc/testing';\nimport { stub } from 'sinon';\n\nimport '@spectrum-web-components/textfield/sp-textfield.js';\nimport { Textfield } from '@spectrum-web-components/textfield';\nimport '@spectrum-web-components/picker/sp-picker.js';\nimport { Picker } from '@spectrum-web-components/picker';\nimport '@spectrum-web-components/menu/sp-menu.js';\nimport '@spectrum-web-components/menu/sp-menu-item.js';\n\nimport '@spectrum-web-components/field-label/sp-field-label.js';\nimport { FieldLabel } from '@spectrum-web-components/field-label';\nimport { testForLitDevWarnings } from '../../../test/testing-helpers.js';\n\ndescribe('FieldLabel', () => {\n    testForLitDevWarnings(\n        async () =>\n            await fixture<FieldLabel>(\n                html`\n                    <div>\n                        <sp-field-label for=\"test\">Input label</sp-field-label>\n                        <input id=\"test\" />\n                    </div>\n                `\n            )\n    );\n    it('loads default field-label accessibly', async () => {\n        const el = await fixture<FieldLabel>(\n            html`\n                <div>\n                    <sp-field-label for=\"test\">Input label</sp-field-label>\n                    <input id=\"test\" />\n                </div>\n            `\n        );\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n    it('loads [required] field-label accessibly', async () => {\n        const el = await fixture<FieldLabel>(\n            html`\n                <div>\n                    <sp-field-label required for=\"test\">\n                        Required input label\n                    </sp-field-label>\n                    <input id=\"test\" />\n                </div>\n            `\n        );\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n    it('loads with no \"for\"', async () => {\n        const el = await fixture<FieldLabel>(\n            html`\n                <sp-field-label>Input label</sp-field-label>\n            `\n        );\n\n        await elementUpdated(el);\n\n        await expect(el).to.be.accessible();\n    });\n    it('allows unfulfilled \"for\"', async () => {\n        const el = await fixture<FieldLabel>(\n            html`\n                <sp-field-label>Input label</sp-field-label>\n            `\n        );\n        await elementUpdated(el);\n        const manageSpy = stub(\n            el as unknown as { manageFor(): Promise<string> },\n            'manageFor'\n        );\n        manageSpy.callsFake(async (...args): Promise<string> => {\n            try {\n                await (\n                    FieldLabel.prototype as unknown as {\n                        manageFor(): Promise<void>;\n                    }\n                ).manageFor.apply(el, ...args);\n            } catch (error) {\n                return 'Error was thrown.';\n            }\n            return 'No error was thrown.';\n        });\n\n        el.for = 'not-available';\n        await elementUpdated(el);\n        const result = await manageSpy.returnValues[0];\n        expect(result).to.equal('No error was thrown.');\n    });\n    it('associates itself to an element whose \"id\" matches its \"for\" attribute', async () => {\n        const test = await fixture<HTMLDivElement>(\n            html`\n                <div>\n                    <sp-field-label required for=\"test\"></sp-field-label>\n                    <input id=\"test\" />\n                </div>\n            `\n        );\n        const el = test.querySelector('sp-field-label') as FieldLabel;\n        const input = test.querySelector('input') as HTMLInputElement;\n\n        await elementUpdated(el);\n\n        expect(input.hasAttribute('aria-labelledby'));\n        expect(input.getAttribute('aria-labelledby')).to.equal(el.id);\n    });\n    it('passed clicks to assiciated form element as focus', async () => {\n        const test = await fixture<HTMLDivElement>(\n            html`\n                <div>\n                    <sp-field-label required for=\"test\"></sp-field-label>\n                    <input id=\"test\" />\n                </div>\n            `\n        );\n        const el = test.querySelector('sp-field-label') as FieldLabel;\n        const input = test.querySelector('input') as HTMLInputElement;\n\n        await elementUpdated(el);\n\n        el.click();\n        await elementUpdated(el);\n\n        expect(document.activeElement).to.equal(input);\n    });\n    it('associates itself to an element with a focueElement whose \"id\" matches its \"for\" attribute', async () => {\n        const test = await fixture<HTMLDivElement>(\n            html`\n                <div>\n                    <sp-field-label required for=\"test\"></sp-field-label>\n                    <sp-textfield id=\"test\"></sp-textfield>\n                </div>\n            `\n        );\n        const el = test.querySelector('sp-field-label') as FieldLabel;\n        const input = (test.querySelector('sp-textfield') as Textfield)\n            .focusElement as HTMLInputElement;\n\n        await elementUpdated(el);\n\n        expect(input.hasAttribute('aria-label'));\n        expect(input.getAttribute('aria-label')).to.equal(\n            (el.textContent || '').trim()\n        );\n    });\n    it('passed clicks to assiciated form element with a focueElement as focus', async () => {\n        const test = await fixture<HTMLDivElement>(\n            html`\n                <div>\n                    <sp-field-label required for=\"test\"></sp-field-label>\n                    <sp-textfield id=\"test\"></sp-textfield>\n                </div>\n            `\n        );\n        const el = test.querySelector('sp-field-label') as FieldLabel;\n        const input = test.querySelector('sp-textfield') as Textfield;\n\n        await elementUpdated(el);\n\n        el.click();\n        await elementUpdated(el);\n\n        expect(document.activeElement).to.equal(input);\n    });\n    it('forces focus visible when available', async () => {\n        const test = await fixture<HTMLDivElement>(\n            html`\n                <div>\n                    <sp-field-label required for=\"test\"></sp-field-label>\n                    <sp-picker id=\"test\">\n                        <sp-menu-item>Test</sp-menu-item>\n                    </sp-picker>\n                </div>\n            `\n        );\n        const el = test.querySelector('sp-field-label') as FieldLabel;\n        const picker = test.querySelector('sp-picker') as Picker;\n\n        await elementUpdated(el);\n        await elementUpdated(picker);\n        expect(picker.focused).to.be.false;\n\n        el.click();\n        await elementUpdated(el);\n        await elementUpdated(picker);\n\n        expect(document.activeElement).to.equal(picker);\n        expect(picker.focused).to.be.true;\n    });\n});\n"],
  "mappings": "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",
  "names": []
}
