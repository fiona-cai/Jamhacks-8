var p=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var o=(u,t,e,s)=>{for(var r=s>1?void 0:s?d(t,e):t,i=u.length-1,l;i>=0;i--)(l=u[i])&&(r=(s?l(t,e,r):l(r))||r);return s&&r&&p(t,e,r),r};import{html as n,SizedMixin as f,SpectrumElement as m}from"@spectrum-web-components/base";import{property as a,query as h}from"@spectrum-web-components/base/src/decorators.js";import"@spectrum-web-components/icons-ui/icons/sp-icon-asterisk100.js";import g from"@spectrum-web-components/icon/src/spectrum-icon-asterisk.css.js";import b from"./field-label.css.js";const c=class extends f(m){constructor(){super(...arguments);this.disabled=!1;this.id="";this.for="";this.required=!1}static get styles(){return[b,g]}handleClick(t){if(!this.target||this.disabled||t.defaultPrevented)return;this.target.focus();const e=this.getRootNode(),s=this.target,r=s.getRootNode(),i=r.host;r===e&&s.forceFocusVisible?s.forceFocusVisible():i&&i.forceFocusVisible&&i.forceFocusVisible()}async manageFor(){if(!this.for)return;const t=this.getRootNode(),e=t.querySelector(`#${this.for}`);if(!!e)return e.localName.search("-")>0&&await customElements.whenDefined(e.localName),typeof e.updateComplete!="undefined"&&await e.updateComplete,this.target=e.focusElement||e,this.target&&(this.target.getRootNode()===t?this.target.setAttribute("aria-labelledby",this.id):this.target.setAttribute("aria-label",this.labelText)),Promise.resolve()}get labelText(){const t=this.slotEl.assignedNodes({flatten:!0});return t.length?t.map(s=>(s.textContent||"").trim()).join(" "):""}render(){return n`
            <label>
                <slot @slotchange=${this.manageFor}></slot>
                ${this.required?n`
                          <sp-icon-asterisk100
                              class="required-icon spectrum-UIIcon-Asterisk100"
                          ></sp-icon-asterisk100>
                      `:n``}
            </label>
        `}firstUpdated(t){super.firstUpdated(t),this.addEventListener("click",this.handleClick)}willUpdate(t){this.hasAttribute("id")||this.setAttribute("id",`${this.tagName.toLowerCase()}-${c.instanceCount++}`),(t.has("for")||t.has("id"))&&this.manageFor()}};export let FieldLabel=c;FieldLabel.instanceCount=0,o([a({type:Boolean,reflect:!0})],FieldLabel.prototype,"disabled",2),o([a({type:String})],FieldLabel.prototype,"id",2),o([a({type:String})],FieldLabel.prototype,"for",2),o([a({type:Boolean,reflect:!0})],FieldLabel.prototype,"required",2),o([h("slot")],FieldLabel.prototype,"slotEl",2),o([a({type:String,reflect:!0,attribute:"side-aligned"})],FieldLabel.prototype,"sideAligned",2);
//# sourceMappingURL=FieldLabel.js.map
