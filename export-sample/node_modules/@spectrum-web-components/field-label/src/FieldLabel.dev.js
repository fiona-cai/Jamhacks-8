var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
import {
  html,
  SizedMixin,
  SpectrumElement
} from "@spectrum-web-components/base";
import {
  property,
  query
} from "@spectrum-web-components/base/src/decorators.js";
import "@spectrum-web-components/icons-ui/icons/sp-icon-asterisk100.js";
import asteriskIconStyles from "@spectrum-web-components/icon/src/spectrum-icon-asterisk.css.js";
import styles from "./field-label.css.js";
const _FieldLabel = class extends SizedMixin(SpectrumElement) {
  constructor() {
    super(...arguments);
    this.disabled = false;
    this.id = "";
    this.for = "";
    this.required = false;
  }
  static get styles() {
    return [styles, asteriskIconStyles];
  }
  handleClick(event) {
    if (!this.target || this.disabled || event.defaultPrevented)
      return;
    this.target.focus();
    const parent = this.getRootNode();
    const target = this.target;
    const targetParent = target.getRootNode();
    const targetHost = targetParent.host;
    if (targetParent === parent && target.forceFocusVisible) {
      target.forceFocusVisible();
    } else if (targetHost && targetHost.forceFocusVisible) {
      targetHost.forceFocusVisible();
    }
  }
  async manageFor() {
    if (!this.for) {
      return;
    }
    const parent = this.getRootNode();
    const target = parent.querySelector(`#${this.for}`);
    if (!target) {
      return;
    }
    if (target.localName.search("-") > 0) {
      await customElements.whenDefined(target.localName);
    }
    if (typeof target.updateComplete !== "undefined") {
      await target.updateComplete;
    }
    this.target = target.focusElement || target;
    if (this.target) {
      const targetParent = this.target.getRootNode();
      if (targetParent === parent) {
        this.target.setAttribute("aria-labelledby", this.id);
      } else {
        this.target.setAttribute("aria-label", this.labelText);
      }
    }
    return Promise.resolve();
  }
  get labelText() {
    const assignedNodes = this.slotEl.assignedNodes({ flatten: true });
    if (!assignedNodes.length) {
      return "";
    }
    const labelText = assignedNodes.map((node) => (node.textContent || "").trim());
    return labelText.join(" ");
  }
  render() {
    return html`
            <label>
                <slot @slotchange=${this.manageFor}></slot>
                ${this.required ? html`
                          <sp-icon-asterisk100
                              class="required-icon spectrum-UIIcon-Asterisk100"
                          ></sp-icon-asterisk100>
                      ` : html``}
            </label>
        `;
  }
  firstUpdated(changes) {
    super.firstUpdated(changes);
    this.addEventListener("click", this.handleClick);
  }
  willUpdate(changes) {
    if (!this.hasAttribute("id")) {
      this.setAttribute("id", `${this.tagName.toLowerCase()}-${_FieldLabel.instanceCount++}`);
    }
    if (changes.has("for") || changes.has("id")) {
      this.manageFor();
    }
  }
};
export let FieldLabel = _FieldLabel;
FieldLabel.instanceCount = 0;
__decorateClass([
  property({ type: Boolean, reflect: true })
], FieldLabel.prototype, "disabled", 2);
__decorateClass([
  property({ type: String })
], FieldLabel.prototype, "id", 2);
__decorateClass([
  property({ type: String })
], FieldLabel.prototype, "for", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], FieldLabel.prototype, "required", 2);
__decorateClass([
  query("slot")
], FieldLabel.prototype, "slotEl", 2);
__decorateClass([
  property({ type: String, reflect: true, attribute: "side-aligned" })
], FieldLabel.prototype, "sideAligned", 2);
//# sourceMappingURL=FieldLabel.dev.js.map
