/********************************************************************************
 * MIT License

 * Â© Copyright 2023 Adobe. All rights reserved.

 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 ********************************************************************************/
import { ManifestVersion } from "../AddOnManifest.js";
/**
 * Defines the getter methods for Manifest Entrypoint field
 */
export class AddOnManifestEntrypoint {
    _manifestVersion;
    _entrypoint;
    constructor(_manifestVersion, _entrypoint) {
        this._manifestVersion = _manifestVersion;
        this._entrypoint = _entrypoint;
        switch (this._manifestVersion) {
            case ManifestVersion.V1: {
                this._entrypoint = _entrypoint;
                break;
            }
            default: {
                this._entrypoint = _entrypoint;
            }
        }
    }
    get type() {
        return this._entrypoint.type;
    }
    get id() {
        return this._entrypoint.id;
    }
    get label() {
        switch (this._manifestVersion) {
            case ManifestVersion.V1: {
                return this._entrypoint.label;
            }
            default: {
                return undefined;
            }
        }
    }
    get permissions() {
        return this._entrypoint.permissions;
    }
    get defaultSize() {
        return this._entrypoint.defaultSize;
    }
    get main() {
        return this._entrypoint.main;
    }
    get entrypointProperties() {
        return this._entrypoint;
    }
    get documentSandbox() {
        switch (this._manifestVersion) {
            case ManifestVersion.V2: {
                const entrypoint = this._entrypoint;
                // Support deprecated entrypoint script
                return entrypoint.documentSandbox || entrypoint.script;
            }
            default: {
                return undefined;
            }
        }
    }
    get hostDomain() {
        switch (this._manifestVersion) {
            case ManifestVersion.V1: {
                return undefined;
            }
            default: {
                return this._entrypoint.hostDomain;
            }
        }
    }
    get discoverable() {
        switch (this._manifestVersion) {
            case ManifestVersion.V1: {
                return undefined;
            }
            default: {
                return this._entrypoint.discoverable;
            }
        }
    }
}
//# sourceMappingURL=AddOnManifestEntrypoint.js.map