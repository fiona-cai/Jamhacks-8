import { CSSResultArray, PropertyValues, TemplateResult } from '@spectrum-web-components/base';
import { Focusable } from '@spectrum-web-components/shared/src/focusable.js';
import '@spectrum-web-components/icons-ui/icons/sp-icon-chevron100.js';
import '@spectrum-web-components/icons-workflow/icons/sp-icon-alert.js';
import '@spectrum-web-components/menu/sp-menu.js';
import type { Menu, MenuItem, MenuItemAddedOrUpdatedEvent, MenuItemChildren, MenuItemRemovedEvent } from '@spectrum-web-components/menu';
import '@spectrum-web-components/tray/sp-tray.js';
import '@spectrum-web-components/popover/sp-popover.js';
import { OverlayOptions, Placement, TriggerInteractions } from '@spectrum-web-components/overlay';
import { MatchMediaController } from '@spectrum-web-components/reactive-controllers/src/MatchMedia.js';
declare const PickerBase_base: typeof Focusable & {
    new (...args: any[]): import("@spectrum-web-components/base").SizedElementInterface;
    prototype: import("@spectrum-web-components/base").SizedElementInterface;
};
/**
 * @element sp-picker
 *
 * @slot label - The placeholder content for the Picker
 * @slot - menu items to be listed in the Picker
 * @fires change - Announces that the `value` of the element has changed
 * @fires sp-opened - Announces that the overlay has been opened
 * @fires sp-closed - Announces that the overlay has been closed
 */
export declare class PickerBase extends PickerBase_base {
    /**
     * @private
     */
    static openOverlay: (target: HTMLElement, interaction: TriggerInteractions, content: HTMLElement, options: OverlayOptions) => Promise<() => void>;
    protected isMobile: MatchMediaController;
    button: HTMLButtonElement;
    get target(): HTMLButtonElement | this;
    disabled: boolean;
    focused: boolean;
    icons?: 'only' | 'none';
    invalid: boolean;
    label?: string;
    open: boolean;
    readonly: boolean;
    selects: undefined | 'single';
    menuItems: MenuItem[];
    private restoreChildren?;
    optionsMenu: Menu;
    /**
     * @type {"auto" | "auto-start" | "auto-end" | "top" | "bottom" | "right" | "left" | "top-start" | "top-end" | "bottom-start" | "bottom-end" | "right-start" | "right-end" | "left-start" | "left-end" | "none"}
     * @attr
     */
    placement: Placement;
    quiet: boolean;
    value: string;
    selectedItem?: MenuItem;
    private closeOverlay?;
    private popoverEl;
    protected listRole: 'listbox' | 'menu';
    protected itemRole: string;
    constructor();
    get focusElement(): HTMLElement;
    forceFocusVisible(): void;
    onButtonBlur(): void;
    protected onButtonClick(): void;
    focus(options?: FocusOptions): void;
    onHelperFocus(): void;
    onButtonFocus(): void;
    handleChange(event: Event): void;
    protected onKeydown: (event: KeyboardEvent) => void;
    setValueFromItem(item: MenuItem, menuChangeEvent?: Event): Promise<void>;
    protected setMenuItemSelected(item: MenuItem, value: boolean): void;
    toggle(target?: boolean): void;
    close(): void;
    overlayOpenCallback: () => Promise<void>;
    overlayCloseCallback: () => Promise<void>;
    private popoverFragment;
    private generatePopover;
    private openMenu;
    protected sizePopover(popover: HTMLElement): void;
    private closeMenu;
    protected get selectedItemContent(): MenuItemChildren;
    protected renderLabelContent(content: Node[]): TemplateResult | Node[];
    protected get buttonContent(): TemplateResult[];
    protected render(): TemplateResult;
    protected update(changes: PropertyValues<this>): void;
    protected get dismissHelper(): TemplateResult;
    protected get renderPopover(): TemplateResult;
    private _willUpdateItems;
    protected itemsUpdated: Promise<void>;
    /**
     * Acquire the available MenuItems in the Picker by
     * direct element query or by assuming the list managed
     * by the Menu within the open options overlay.
     */
    protected updateMenuItems(event?: MenuItemAddedOrUpdatedEvent | MenuItemRemovedEvent): void;
    protected manageSelection(): Promise<void>;
    private menuStatePromise;
    private menuStateResolver;
    private selectionPromise;
    private selectionResolver;
    protected getUpdateComplete(): Promise<boolean>;
    connectedCallback(): void;
    disconnectedCallback(): void;
}
export declare class Picker extends PickerBase {
    static get styles(): CSSResultArray;
    protected onKeydown: (event: KeyboardEvent) => void;
}
export {};
