{
  "version": 3,
  "sources": ["ActionButton.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    DefaultElementSize,\n    html,\n    PropertyValues,\n    SizedMixin,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { property } from '@spectrum-web-components/base/src/decorators.js';\nimport { ButtonBase } from '@spectrum-web-components/button';\nimport buttonStyles from './action-button.css.js';\nimport cornerTriangleStyles from '@spectrum-web-components/icon/src/spectrum-icon-corner-triangle.css.js';\nimport '@spectrum-web-components/icons-ui/icons/sp-icon-corner-triangle300.js';\n\nconst holdAffordanceClass = {\n    xs: 'spectrum-UIIcon-CornerTriangle75',\n    s: 'spectrum-UIIcon-CornerTriangle75',\n    m: 'spectrum-UIIcon-CornerTriangle100',\n    l: 'spectrum-UIIcon-CornerTriangle200',\n    xl: 'spectrum-UIIcon-CornerTriangle300',\n};\n\nexport const LONGPRESS_DURATION = 300;\nlet LONGPRESS_TIMEOUT: ReturnType<typeof setTimeout>;\n\nexport type LongpressEvent = {\n    source: 'pointer' | 'keyboard';\n};\n\n/**\n * @element sp-action-button\n *\n * @slot - text label of the Action Button\n * @slot icon - The icon to use for Action Button\n * @fires change - Announces a change in the `selected` property of an action button\n * @fires longpress - Synthesizes a \"longpress\" interaction that signifies a\n * `pointerdown` event that is >=300ms or a keyboard event wher code is `Space` or code is `ArrowDown`\n * while `altKey===true`.\n */\nexport class ActionButton extends SizedMixin(ButtonBase, {\n    validSizes: ['xs', 's', 'm', 'l', 'xl'],\n}) {\n    public static override get styles(): CSSResultArray {\n        return [...super.styles, buttonStyles, cornerTriangleStyles];\n    }\n\n    @property({ type: Boolean, reflect: true })\n    public emphasized = false;\n\n    @property({ type: Boolean, reflect: true, attribute: 'hold-affordance' })\n    public holdAffordance = false;\n\n    @property({ type: Boolean, reflect: true })\n    public quiet = false;\n\n    @property({ reflect: true })\n    public role = 'button';\n\n    /**\n     * Whether an Action Button with `role='button'`\n     * should also be `aria-pressed='true'`\n     */\n    @property({ type: Boolean, reflect: true })\n    public selected = false;\n\n    /**\n     * Whether to automatically manage the `selected`\n     * attribute on interaction and whether `aria-pressed=\"false\"`\n     * should be used when `selected === false`\n     */\n    @property({ type: Boolean, reflect: true })\n    public toggles = false;\n\n    @property({ reflect: true })\n    public variant?: 'white' | 'black';\n\n    @property({ type: String })\n    public get value(): string {\n        return this._value || this.itemText;\n    }\n    public set value(value: string) {\n        if (value === this._value) {\n            return;\n        }\n        this._value = value || '';\n        if (this._value) {\n            this.setAttribute('value', this._value);\n        } else {\n            this.removeAttribute('value');\n        }\n    }\n    private _value = '';\n\n    /**\n     * @private\n     */\n    public get itemText(): string {\n        return (this.textContent || /* c8 ignore next */ '').trim();\n    }\n\n    constructor() {\n        super();\n        this.addEventListener('click', this.onClick);\n        this.addEventListener('pointerdown', this.onPointerdown);\n    }\n\n    private onClick = (): void => {\n        if (!this.toggles) {\n            return;\n        }\n        this.selected = !this.selected;\n        const applyDefault = this.dispatchEvent(\n            new Event('change', {\n                cancelable: true,\n            })\n        );\n        if (!applyDefault) {\n            this.selected = !this.selected;\n        }\n    };\n\n    private onPointerdown(event: PointerEvent): void {\n        if (event.button !== 0) return;\n        this.addEventListener('pointerup', this.onPointerup);\n        this.addEventListener('pointercancel', this.onPointerup);\n        LONGPRESS_TIMEOUT = setTimeout(() => {\n            this.dispatchEvent(\n                new CustomEvent<LongpressEvent>('longpress', {\n                    bubbles: true,\n                    composed: true,\n                    detail: {\n                        source: 'pointer',\n                    },\n                })\n            );\n        }, LONGPRESS_DURATION);\n    }\n\n    private onPointerup(): void {\n        clearTimeout(LONGPRESS_TIMEOUT);\n        this.removeEventListener('pointerup', this.onPointerup);\n        this.removeEventListener('pointercancel', this.onPointerup);\n    }\n\n    /**\n     * @private\n     */\n    protected override handleKeydown(event: KeyboardEvent): void {\n        if (!this.holdAffordance) {\n            return super.handleKeydown(event);\n        }\n        const { code, altKey } = event;\n        if (code === 'Space' || (altKey && code === 'ArrowDown')) {\n            event.preventDefault();\n            if (code === 'ArrowDown') {\n                event.stopPropagation();\n                event.stopImmediatePropagation();\n            }\n            this.addEventListener('keyup', this.handleKeyup);\n            this.active = true;\n        }\n    }\n\n    protected override handleKeyup(event: KeyboardEvent): void {\n        if (!this.holdAffordance) {\n            return super.handleKeyup(event);\n        }\n        const { code, altKey } = event;\n        if (code === 'Space' || (altKey && code === 'ArrowDown')) {\n            event.stopPropagation();\n            this.dispatchEvent(\n                new CustomEvent<LongpressEvent>('longpress', {\n                    bubbles: true,\n                    composed: true,\n                    detail: {\n                        source: 'keyboard',\n                    },\n                })\n            );\n            this.active = false;\n        }\n    }\n\n    protected override get buttonContent(): TemplateResult[] {\n        const buttonContent = super.buttonContent;\n        if (this.holdAffordance) {\n            buttonContent.unshift(html`\n                <sp-icon-corner-triangle300\n                    class=\"hold-affordance ${holdAffordanceClass[\n                        this.size as DefaultElementSize\n                    ]}\"\n                ></sp-icon-corner-triangle300>\n            `);\n        }\n        return buttonContent;\n    }\n\n    protected override updated(changes: PropertyValues): void {\n        super.updated(changes);\n        const isButton = this.role === 'button';\n        const canBePressed = isButton && (this.selected || this.toggles);\n        if (changes.has('selected') || changes.has('role')) {\n            // When role !== 'button' then the Action Button is within\n            // an Action Group that manages selects which means the\n            // Action Button is a \"checkbox\" or \"radio\" and cannot\n            // accept the `aria-pressed` attribute.\n            if (canBePressed) {\n                this.setAttribute(\n                    'aria-pressed',\n                    this.selected ? 'true' : 'false'\n                );\n            } else {\n                // When !this.toggles the lack of \"aria-pressed\" is inconsequential.\n                this.removeAttribute('aria-pressed');\n            }\n        }\n    }\n}\n\ndeclare global {\n    interface GlobalEventHandlersEventMap {\n        longpress: CustomEvent<LongpressEvent>;\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
