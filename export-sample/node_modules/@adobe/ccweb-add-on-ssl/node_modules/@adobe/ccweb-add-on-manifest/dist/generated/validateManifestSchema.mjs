"use strict";
export const validateSchemaV1 = validate10;
const schema11 = { "$id": "#/definitions/manifestSchemaV1", "type": "object", "properties": { "id": { "type": "string" }, "name": { "anyOf": [{ "type": "string" }, { "type": "object", "properties": { "default": { "type": "string" } }, "required": ["default"], "additionalProperties": true }] }, "version": { "type": "string" }, "manifestVersion": { "type": "number" }, "requirements": { "type": "object", "properties": { "apps": { "type": "array", "items": { "type": "string", "pattern": "^(Express)$" } }, "experimentalApis": { "type": "boolean" } }, "required": ["apps"], "additionalProperties": false }, "icon": { "anyOf": [{ "type": "object", "properties": { "width": { "type": "number" }, "height": { "type": "number" }, "href": { "type": "string" }, "theme": { "type": "array", "items": { "type": "string", "pattern": "^(lightest|light|medium|dark|darkest|all)$" } }, "scale": { "type": "array", "items": { "type": "number" } } }, "required": ["href", "theme"], "additionalProperties": false }, { "type": "array", "items": { "type": "object", "properties": { "width": { "type": "number" }, "height": { "type": "number" }, "href": { "type": "string" }, "theme": { "type": "array", "items": { "type": "string", "pattern": "^(lightest|light|medium|dark|darkest|all)$" } }, "scale": { "type": "array", "items": { "type": "number" } } }, "required": ["href", "theme"], "additionalProperties": false } }] }, "entryPoints": { "type": "array", "items": { "type": "object", "properties": { "type": { "type": "string", "pattern": "^(panel|share|content-hub)$" }, "id": { "type": "string" }, "main": { "type": "string" }, "label": { "anyOf": [{ "type": "string" }, { "type": "object", "properties": { "default": { "type": "string" } }, "required": ["default"], "additionalProperties": true }] }, "permissions": { "type": "object", "properties": { "sandbox": { "type": "array", "items": { "type": "string", "pattern": "^(allow-popups|allow-presentation|allow-downloads|allow-popups-to-escape-sandbox)$" } }, "oauth": { "type": "array", "items": { "type": "string" } }, "microphone": { "type": "string" }, "camera": { "type": "string" } }, "required": [], "additionalProperties": false }, "defaultSize": { "type": "object", "properties": { "width": { "type": "number" }, "height": { "type": "number" } }, "required": ["width", "height"], "additionalProperties": false } }, "required": ["type", "id", "label", "main"], "additionalProperties": false } }, "authorInfo": { "type": "object", "properties": { "name": { "type": "string" }, "email": { "type": "string" }, "url": { "type": "string" } }, "required": ["name", "email"], "additionalProperties": false } }, "required": ["id", "name", "version", "manifestVersion", "requirements", "icon", "entryPoints"], "additionalProperties": false };
const pattern0 = new RegExp("^(Express)$", "u");
const pattern1 = new RegExp("^(lightest|light|medium|dark|darkest|all)$", "u");
const pattern3 = new RegExp("^(panel|share|content-hub)$", "u");
const pattern4 = new RegExp("^(allow-popups|allow-presentation|allow-downloads|allow-popups-to-escape-sandbox)$", "u");
function validate10(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="#/definitions/manifestSchemaV1" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((((((((data.id === undefined) && (missing0 = "id")) || ((data.name === undefined) && (missing0 = "name"))) || ((data.version === undefined) && (missing0 = "version"))) || ((data.manifestVersion === undefined) && (missing0 = "manifestVersion"))) || ((data.requirements === undefined) && (missing0 = "requirements"))) || ((data.icon === undefined) && (missing0 = "icon"))) || ((data.entryPoints === undefined) && (missing0 = "entryPoints"))) {
            validate10.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            const _errs1 = errors;
            for (const key0 in data) {
                if (!((((((((key0 === "id") || (key0 === "name")) || (key0 === "version")) || (key0 === "manifestVersion")) || (key0 === "requirements")) || (key0 === "icon")) || (key0 === "entryPoints")) || (key0 === "authorInfo"))) {
                    validate10.errors = [{ instancePath, schemaPath: "#/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                    return false;
                    break;
                }
            }
            if (_errs1 === errors) {
                if (data.id !== undefined) {
                    const _errs2 = errors;
                    if (typeof data.id !== "string") {
                        validate10.errors = [{ instancePath: instancePath + "/id", schemaPath: "#/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs2 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.name !== undefined) {
                        let data1 = data.name;
                        const _errs4 = errors;
                        const _errs5 = errors;
                        let valid1 = false;
                        const _errs6 = errors;
                        if (typeof data1 !== "string") {
                            const err0 = { instancePath: instancePath + "/name", schemaPath: "#/properties/name/anyOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                            if (vErrors === null) {
                                vErrors = [err0];
                            }
                            else {
                                vErrors.push(err0);
                            }
                            errors++;
                        }
                        var _valid0 = _errs6 === errors;
                        valid1 = valid1 || _valid0;
                        if (!valid1) {
                            const _errs8 = errors;
                            if (errors === _errs8) {
                                if (data1 && typeof data1 == "object" && !Array.isArray(data1)) {
                                    let missing1;
                                    if ((data1.default === undefined) && (missing1 = "default")) {
                                        const err1 = { instancePath: instancePath + "/name", schemaPath: "#/properties/name/anyOf/1/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" };
                                        if (vErrors === null) {
                                            vErrors = [err1];
                                        }
                                        else {
                                            vErrors.push(err1);
                                        }
                                        errors++;
                                    }
                                    else {
                                        if (data1.default !== undefined) {
                                            if (typeof data1.default !== "string") {
                                                const err2 = { instancePath: instancePath + "/name/default", schemaPath: "#/properties/name/anyOf/1/properties/default/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                if (vErrors === null) {
                                                    vErrors = [err2];
                                                }
                                                else {
                                                    vErrors.push(err2);
                                                }
                                                errors++;
                                            }
                                        }
                                    }
                                }
                                else {
                                    const err3 = { instancePath: instancePath + "/name", schemaPath: "#/properties/name/anyOf/1/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                                    if (vErrors === null) {
                                        vErrors = [err3];
                                    }
                                    else {
                                        vErrors.push(err3);
                                    }
                                    errors++;
                                }
                            }
                            var _valid0 = _errs8 === errors;
                            valid1 = valid1 || _valid0;
                        }
                        if (!valid1) {
                            const err4 = { instancePath: instancePath + "/name", schemaPath: "#/properties/name/anyOf", keyword: "anyOf", params: {}, message: "must match a schema in anyOf" };
                            if (vErrors === null) {
                                vErrors = [err4];
                            }
                            else {
                                vErrors.push(err4);
                            }
                            errors++;
                            validate10.errors = vErrors;
                            return false;
                        }
                        else {
                            errors = _errs5;
                            if (vErrors !== null) {
                                if (_errs5) {
                                    vErrors.length = _errs5;
                                }
                                else {
                                    vErrors = null;
                                }
                            }
                        }
                        var valid0 = _errs4 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.version !== undefined) {
                            const _errs13 = errors;
                            if (typeof data.version !== "string") {
                                validate10.errors = [{ instancePath: instancePath + "/version", schemaPath: "#/properties/version/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                            var valid0 = _errs13 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.manifestVersion !== undefined) {
                                let data4 = data.manifestVersion;
                                const _errs15 = errors;
                                if (!((typeof data4 == "number") && (isFinite(data4)))) {
                                    validate10.errors = [{ instancePath: instancePath + "/manifestVersion", schemaPath: "#/properties/manifestVersion/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                    return false;
                                }
                                var valid0 = _errs15 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                            if (valid0) {
                                if (data.requirements !== undefined) {
                                    let data5 = data.requirements;
                                    const _errs17 = errors;
                                    if (errors === _errs17) {
                                        if (data5 && typeof data5 == "object" && !Array.isArray(data5)) {
                                            let missing2;
                                            if ((data5.apps === undefined) && (missing2 = "apps")) {
                                                validate10.errors = [{ instancePath: instancePath + "/requirements", schemaPath: "#/properties/requirements/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }];
                                                return false;
                                            }
                                            else {
                                                const _errs19 = errors;
                                                for (const key1 in data5) {
                                                    if (!((key1 === "apps") || (key1 === "experimentalApis"))) {
                                                        validate10.errors = [{ instancePath: instancePath + "/requirements", schemaPath: "#/properties/requirements/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                                        return false;
                                                        break;
                                                    }
                                                }
                                                if (_errs19 === errors) {
                                                    if (data5.apps !== undefined) {
                                                        let data6 = data5.apps;
                                                        const _errs20 = errors;
                                                        if (errors === _errs20) {
                                                            if (Array.isArray(data6)) {
                                                                var valid4 = true;
                                                                const len0 = data6.length;
                                                                for (let i0 = 0; i0 < len0; i0++) {
                                                                    let data7 = data6[i0];
                                                                    const _errs22 = errors;
                                                                    if (errors === _errs22) {
                                                                        if (typeof data7 === "string") {
                                                                            if (!pattern0.test(data7)) {
                                                                                validate10.errors = [{ instancePath: instancePath + "/requirements/apps/" + i0, schemaPath: "#/properties/requirements/properties/apps/items/pattern", keyword: "pattern", params: { pattern: "^(Express)$" }, message: "must match pattern \"" + "^(Express)$" + "\"" }];
                                                                                return false;
                                                                            }
                                                                        }
                                                                        else {
                                                                            validate10.errors = [{ instancePath: instancePath + "/requirements/apps/" + i0, schemaPath: "#/properties/requirements/properties/apps/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                            return false;
                                                                        }
                                                                    }
                                                                    var valid4 = _errs22 === errors;
                                                                    if (!valid4) {
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            else {
                                                                validate10.errors = [{ instancePath: instancePath + "/requirements/apps", schemaPath: "#/properties/requirements/properties/apps/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                                return false;
                                                            }
                                                        }
                                                        var valid3 = _errs20 === errors;
                                                    }
                                                    else {
                                                        var valid3 = true;
                                                    }
                                                    if (valid3) {
                                                        if (data5.experimentalApis !== undefined) {
                                                            const _errs24 = errors;
                                                            if (typeof data5.experimentalApis !== "boolean") {
                                                                validate10.errors = [{ instancePath: instancePath + "/requirements/experimentalApis", schemaPath: "#/properties/requirements/properties/experimentalApis/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                                                return false;
                                                            }
                                                            var valid3 = _errs24 === errors;
                                                        }
                                                        else {
                                                            var valid3 = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            validate10.errors = [{ instancePath: instancePath + "/requirements", schemaPath: "#/properties/requirements/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                            return false;
                                        }
                                    }
                                    var valid0 = _errs17 === errors;
                                }
                                else {
                                    var valid0 = true;
                                }
                                if (valid0) {
                                    if (data.icon !== undefined) {
                                        let data9 = data.icon;
                                        const _errs26 = errors;
                                        const _errs27 = errors;
                                        let valid5 = false;
                                        const _errs28 = errors;
                                        if (errors === _errs28) {
                                            if (data9 && typeof data9 == "object" && !Array.isArray(data9)) {
                                                let missing3;
                                                if (((data9.href === undefined) && (missing3 = "href")) || ((data9.theme === undefined) && (missing3 = "theme"))) {
                                                    const err5 = { instancePath: instancePath + "/icon", schemaPath: "#/properties/icon/anyOf/0/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" };
                                                    if (vErrors === null) {
                                                        vErrors = [err5];
                                                    }
                                                    else {
                                                        vErrors.push(err5);
                                                    }
                                                    errors++;
                                                }
                                                else {
                                                    const _errs30 = errors;
                                                    for (const key2 in data9) {
                                                        if (!(((((key2 === "width") || (key2 === "height")) || (key2 === "href")) || (key2 === "theme")) || (key2 === "scale"))) {
                                                            const err6 = { instancePath: instancePath + "/icon", schemaPath: "#/properties/icon/anyOf/0/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" };
                                                            if (vErrors === null) {
                                                                vErrors = [err6];
                                                            }
                                                            else {
                                                                vErrors.push(err6);
                                                            }
                                                            errors++;
                                                            break;
                                                        }
                                                    }
                                                    if (_errs30 === errors) {
                                                        if (data9.width !== undefined) {
                                                            let data10 = data9.width;
                                                            const _errs31 = errors;
                                                            if (!((typeof data10 == "number") && (isFinite(data10)))) {
                                                                const err7 = { instancePath: instancePath + "/icon/width", schemaPath: "#/properties/icon/anyOf/0/properties/width/type", keyword: "type", params: { type: "number" }, message: "must be number" };
                                                                if (vErrors === null) {
                                                                    vErrors = [err7];
                                                                }
                                                                else {
                                                                    vErrors.push(err7);
                                                                }
                                                                errors++;
                                                            }
                                                            var valid6 = _errs31 === errors;
                                                        }
                                                        else {
                                                            var valid6 = true;
                                                        }
                                                        if (valid6) {
                                                            if (data9.height !== undefined) {
                                                                let data11 = data9.height;
                                                                const _errs33 = errors;
                                                                if (!((typeof data11 == "number") && (isFinite(data11)))) {
                                                                    const err8 = { instancePath: instancePath + "/icon/height", schemaPath: "#/properties/icon/anyOf/0/properties/height/type", keyword: "type", params: { type: "number" }, message: "must be number" };
                                                                    if (vErrors === null) {
                                                                        vErrors = [err8];
                                                                    }
                                                                    else {
                                                                        vErrors.push(err8);
                                                                    }
                                                                    errors++;
                                                                }
                                                                var valid6 = _errs33 === errors;
                                                            }
                                                            else {
                                                                var valid6 = true;
                                                            }
                                                            if (valid6) {
                                                                if (data9.href !== undefined) {
                                                                    const _errs35 = errors;
                                                                    if (typeof data9.href !== "string") {
                                                                        const err9 = { instancePath: instancePath + "/icon/href", schemaPath: "#/properties/icon/anyOf/0/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                        if (vErrors === null) {
                                                                            vErrors = [err9];
                                                                        }
                                                                        else {
                                                                            vErrors.push(err9);
                                                                        }
                                                                        errors++;
                                                                    }
                                                                    var valid6 = _errs35 === errors;
                                                                }
                                                                else {
                                                                    var valid6 = true;
                                                                }
                                                                if (valid6) {
                                                                    if (data9.theme !== undefined) {
                                                                        let data13 = data9.theme;
                                                                        const _errs37 = errors;
                                                                        if (errors === _errs37) {
                                                                            if (Array.isArray(data13)) {
                                                                                var valid7 = true;
                                                                                const len1 = data13.length;
                                                                                for (let i1 = 0; i1 < len1; i1++) {
                                                                                    let data14 = data13[i1];
                                                                                    const _errs39 = errors;
                                                                                    if (errors === _errs39) {
                                                                                        if (typeof data14 === "string") {
                                                                                            if (!pattern1.test(data14)) {
                                                                                                const err10 = { instancePath: instancePath + "/icon/theme/" + i1, schemaPath: "#/properties/icon/anyOf/0/properties/theme/items/pattern", keyword: "pattern", params: { pattern: "^(lightest|light|medium|dark|darkest|all)$" }, message: "must match pattern \"" + "^(lightest|light|medium|dark|darkest|all)$" + "\"" };
                                                                                                if (vErrors === null) {
                                                                                                    vErrors = [err10];
                                                                                                }
                                                                                                else {
                                                                                                    vErrors.push(err10);
                                                                                                }
                                                                                                errors++;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            const err11 = { instancePath: instancePath + "/icon/theme/" + i1, schemaPath: "#/properties/icon/anyOf/0/properties/theme/items/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                                            if (vErrors === null) {
                                                                                                vErrors = [err11];
                                                                                            }
                                                                                            else {
                                                                                                vErrors.push(err11);
                                                                                            }
                                                                                            errors++;
                                                                                        }
                                                                                    }
                                                                                    var valid7 = _errs39 === errors;
                                                                                    if (!valid7) {
                                                                                        break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else {
                                                                                const err12 = { instancePath: instancePath + "/icon/theme", schemaPath: "#/properties/icon/anyOf/0/properties/theme/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                                                                                if (vErrors === null) {
                                                                                    vErrors = [err12];
                                                                                }
                                                                                else {
                                                                                    vErrors.push(err12);
                                                                                }
                                                                                errors++;
                                                                            }
                                                                        }
                                                                        var valid6 = _errs37 === errors;
                                                                    }
                                                                    else {
                                                                        var valid6 = true;
                                                                    }
                                                                    if (valid6) {
                                                                        if (data9.scale !== undefined) {
                                                                            let data15 = data9.scale;
                                                                            const _errs41 = errors;
                                                                            if (errors === _errs41) {
                                                                                if (Array.isArray(data15)) {
                                                                                    var valid8 = true;
                                                                                    const len2 = data15.length;
                                                                                    for (let i2 = 0; i2 < len2; i2++) {
                                                                                        let data16 = data15[i2];
                                                                                        const _errs43 = errors;
                                                                                        if (!((typeof data16 == "number") && (isFinite(data16)))) {
                                                                                            const err13 = { instancePath: instancePath + "/icon/scale/" + i2, schemaPath: "#/properties/icon/anyOf/0/properties/scale/items/type", keyword: "type", params: { type: "number" }, message: "must be number" };
                                                                                            if (vErrors === null) {
                                                                                                vErrors = [err13];
                                                                                            }
                                                                                            else {
                                                                                                vErrors.push(err13);
                                                                                            }
                                                                                            errors++;
                                                                                        }
                                                                                        var valid8 = _errs43 === errors;
                                                                                        if (!valid8) {
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    const err14 = { instancePath: instancePath + "/icon/scale", schemaPath: "#/properties/icon/anyOf/0/properties/scale/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                                                                                    if (vErrors === null) {
                                                                                        vErrors = [err14];
                                                                                    }
                                                                                    else {
                                                                                        vErrors.push(err14);
                                                                                    }
                                                                                    errors++;
                                                                                }
                                                                            }
                                                                            var valid6 = _errs41 === errors;
                                                                        }
                                                                        else {
                                                                            var valid6 = true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                const err15 = { instancePath: instancePath + "/icon", schemaPath: "#/properties/icon/anyOf/0/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                                                if (vErrors === null) {
                                                    vErrors = [err15];
                                                }
                                                else {
                                                    vErrors.push(err15);
                                                }
                                                errors++;
                                            }
                                        }
                                        var _valid1 = _errs28 === errors;
                                        valid5 = valid5 || _valid1;
                                        if (!valid5) {
                                            const _errs45 = errors;
                                            if (errors === _errs45) {
                                                if (Array.isArray(data9)) {
                                                    var valid9 = true;
                                                    const len3 = data9.length;
                                                    for (let i3 = 0; i3 < len3; i3++) {
                                                        let data17 = data9[i3];
                                                        const _errs47 = errors;
                                                        if (errors === _errs47) {
                                                            if (data17 && typeof data17 == "object" && !Array.isArray(data17)) {
                                                                let missing4;
                                                                if (((data17.href === undefined) && (missing4 = "href")) || ((data17.theme === undefined) && (missing4 = "theme"))) {
                                                                    const err16 = { instancePath: instancePath + "/icon/" + i3, schemaPath: "#/properties/icon/anyOf/1/items/required", keyword: "required", params: { missingProperty: missing4 }, message: "must have required property '" + missing4 + "'" };
                                                                    if (vErrors === null) {
                                                                        vErrors = [err16];
                                                                    }
                                                                    else {
                                                                        vErrors.push(err16);
                                                                    }
                                                                    errors++;
                                                                }
                                                                else {
                                                                    const _errs49 = errors;
                                                                    for (const key3 in data17) {
                                                                        if (!(((((key3 === "width") || (key3 === "height")) || (key3 === "href")) || (key3 === "theme")) || (key3 === "scale"))) {
                                                                            const err17 = { instancePath: instancePath + "/icon/" + i3, schemaPath: "#/properties/icon/anyOf/1/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" };
                                                                            if (vErrors === null) {
                                                                                vErrors = [err17];
                                                                            }
                                                                            else {
                                                                                vErrors.push(err17);
                                                                            }
                                                                            errors++;
                                                                            break;
                                                                        }
                                                                    }
                                                                    if (_errs49 === errors) {
                                                                        if (data17.width !== undefined) {
                                                                            let data18 = data17.width;
                                                                            const _errs50 = errors;
                                                                            if (!((typeof data18 == "number") && (isFinite(data18)))) {
                                                                                const err18 = { instancePath: instancePath + "/icon/" + i3 + "/width", schemaPath: "#/properties/icon/anyOf/1/items/properties/width/type", keyword: "type", params: { type: "number" }, message: "must be number" };
                                                                                if (vErrors === null) {
                                                                                    vErrors = [err18];
                                                                                }
                                                                                else {
                                                                                    vErrors.push(err18);
                                                                                }
                                                                                errors++;
                                                                            }
                                                                            var valid10 = _errs50 === errors;
                                                                        }
                                                                        else {
                                                                            var valid10 = true;
                                                                        }
                                                                        if (valid10) {
                                                                            if (data17.height !== undefined) {
                                                                                let data19 = data17.height;
                                                                                const _errs52 = errors;
                                                                                if (!((typeof data19 == "number") && (isFinite(data19)))) {
                                                                                    const err19 = { instancePath: instancePath + "/icon/" + i3 + "/height", schemaPath: "#/properties/icon/anyOf/1/items/properties/height/type", keyword: "type", params: { type: "number" }, message: "must be number" };
                                                                                    if (vErrors === null) {
                                                                                        vErrors = [err19];
                                                                                    }
                                                                                    else {
                                                                                        vErrors.push(err19);
                                                                                    }
                                                                                    errors++;
                                                                                }
                                                                                var valid10 = _errs52 === errors;
                                                                            }
                                                                            else {
                                                                                var valid10 = true;
                                                                            }
                                                                            if (valid10) {
                                                                                if (data17.href !== undefined) {
                                                                                    const _errs54 = errors;
                                                                                    if (typeof data17.href !== "string") {
                                                                                        const err20 = { instancePath: instancePath + "/icon/" + i3 + "/href", schemaPath: "#/properties/icon/anyOf/1/items/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                                        if (vErrors === null) {
                                                                                            vErrors = [err20];
                                                                                        }
                                                                                        else {
                                                                                            vErrors.push(err20);
                                                                                        }
                                                                                        errors++;
                                                                                    }
                                                                                    var valid10 = _errs54 === errors;
                                                                                }
                                                                                else {
                                                                                    var valid10 = true;
                                                                                }
                                                                                if (valid10) {
                                                                                    if (data17.theme !== undefined) {
                                                                                        let data21 = data17.theme;
                                                                                        const _errs56 = errors;
                                                                                        if (errors === _errs56) {
                                                                                            if (Array.isArray(data21)) {
                                                                                                var valid11 = true;
                                                                                                const len4 = data21.length;
                                                                                                for (let i4 = 0; i4 < len4; i4++) {
                                                                                                    let data22 = data21[i4];
                                                                                                    const _errs58 = errors;
                                                                                                    if (errors === _errs58) {
                                                                                                        if (typeof data22 === "string") {
                                                                                                            if (!pattern1.test(data22)) {
                                                                                                                const err21 = { instancePath: instancePath + "/icon/" + i3 + "/theme/" + i4, schemaPath: "#/properties/icon/anyOf/1/items/properties/theme/items/pattern", keyword: "pattern", params: { pattern: "^(lightest|light|medium|dark|darkest|all)$" }, message: "must match pattern \"" + "^(lightest|light|medium|dark|darkest|all)$" + "\"" };
                                                                                                                if (vErrors === null) {
                                                                                                                    vErrors = [err21];
                                                                                                                }
                                                                                                                else {
                                                                                                                    vErrors.push(err21);
                                                                                                                }
                                                                                                                errors++;
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            const err22 = { instancePath: instancePath + "/icon/" + i3 + "/theme/" + i4, schemaPath: "#/properties/icon/anyOf/1/items/properties/theme/items/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                                                            if (vErrors === null) {
                                                                                                                vErrors = [err22];
                                                                                                            }
                                                                                                            else {
                                                                                                                vErrors.push(err22);
                                                                                                            }
                                                                                                            errors++;
                                                                                                        }
                                                                                                    }
                                                                                                    var valid11 = _errs58 === errors;
                                                                                                    if (!valid11) {
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                const err23 = { instancePath: instancePath + "/icon/" + i3 + "/theme", schemaPath: "#/properties/icon/anyOf/1/items/properties/theme/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                                                                                                if (vErrors === null) {
                                                                                                    vErrors = [err23];
                                                                                                }
                                                                                                else {
                                                                                                    vErrors.push(err23);
                                                                                                }
                                                                                                errors++;
                                                                                            }
                                                                                        }
                                                                                        var valid10 = _errs56 === errors;
                                                                                    }
                                                                                    else {
                                                                                        var valid10 = true;
                                                                                    }
                                                                                    if (valid10) {
                                                                                        if (data17.scale !== undefined) {
                                                                                            let data23 = data17.scale;
                                                                                            const _errs60 = errors;
                                                                                            if (errors === _errs60) {
                                                                                                if (Array.isArray(data23)) {
                                                                                                    var valid12 = true;
                                                                                                    const len5 = data23.length;
                                                                                                    for (let i5 = 0; i5 < len5; i5++) {
                                                                                                        let data24 = data23[i5];
                                                                                                        const _errs62 = errors;
                                                                                                        if (!((typeof data24 == "number") && (isFinite(data24)))) {
                                                                                                            const err24 = { instancePath: instancePath + "/icon/" + i3 + "/scale/" + i5, schemaPath: "#/properties/icon/anyOf/1/items/properties/scale/items/type", keyword: "type", params: { type: "number" }, message: "must be number" };
                                                                                                            if (vErrors === null) {
                                                                                                                vErrors = [err24];
                                                                                                            }
                                                                                                            else {
                                                                                                                vErrors.push(err24);
                                                                                                            }
                                                                                                            errors++;
                                                                                                        }
                                                                                                        var valid12 = _errs62 === errors;
                                                                                                        if (!valid12) {
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    const err25 = { instancePath: instancePath + "/icon/" + i3 + "/scale", schemaPath: "#/properties/icon/anyOf/1/items/properties/scale/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                                                                                                    if (vErrors === null) {
                                                                                                        vErrors = [err25];
                                                                                                    }
                                                                                                    else {
                                                                                                        vErrors.push(err25);
                                                                                                    }
                                                                                                    errors++;
                                                                                                }
                                                                                            }
                                                                                            var valid10 = _errs60 === errors;
                                                                                        }
                                                                                        else {
                                                                                            var valid10 = true;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else {
                                                                const err26 = { instancePath: instancePath + "/icon/" + i3, schemaPath: "#/properties/icon/anyOf/1/items/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                                                                if (vErrors === null) {
                                                                    vErrors = [err26];
                                                                }
                                                                else {
                                                                    vErrors.push(err26);
                                                                }
                                                                errors++;
                                                            }
                                                        }
                                                        var valid9 = _errs47 === errors;
                                                        if (!valid9) {
                                                            break;
                                                        }
                                                    }
                                                }
                                                else {
                                                    const err27 = { instancePath: instancePath + "/icon", schemaPath: "#/properties/icon/anyOf/1/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                                                    if (vErrors === null) {
                                                        vErrors = [err27];
                                                    }
                                                    else {
                                                        vErrors.push(err27);
                                                    }
                                                    errors++;
                                                }
                                            }
                                            var _valid1 = _errs45 === errors;
                                            valid5 = valid5 || _valid1;
                                        }
                                        if (!valid5) {
                                            const err28 = { instancePath: instancePath + "/icon", schemaPath: "#/properties/icon/anyOf", keyword: "anyOf", params: {}, message: "must match a schema in anyOf" };
                                            if (vErrors === null) {
                                                vErrors = [err28];
                                            }
                                            else {
                                                vErrors.push(err28);
                                            }
                                            errors++;
                                            validate10.errors = vErrors;
                                            return false;
                                        }
                                        else {
                                            errors = _errs27;
                                            if (vErrors !== null) {
                                                if (_errs27) {
                                                    vErrors.length = _errs27;
                                                }
                                                else {
                                                    vErrors = null;
                                                }
                                            }
                                        }
                                        var valid0 = _errs26 === errors;
                                    }
                                    else {
                                        var valid0 = true;
                                    }
                                    if (valid0) {
                                        if (data.entryPoints !== undefined) {
                                            let data25 = data.entryPoints;
                                            const _errs64 = errors;
                                            if (errors === _errs64) {
                                                if (Array.isArray(data25)) {
                                                    var valid13 = true;
                                                    const len6 = data25.length;
                                                    for (let i6 = 0; i6 < len6; i6++) {
                                                        let data26 = data25[i6];
                                                        const _errs66 = errors;
                                                        if (errors === _errs66) {
                                                            if (data26 && typeof data26 == "object" && !Array.isArray(data26)) {
                                                                let missing5;
                                                                if (((((data26.type === undefined) && (missing5 = "type")) || ((data26.id === undefined) && (missing5 = "id"))) || ((data26.label === undefined) && (missing5 = "label"))) || ((data26.main === undefined) && (missing5 = "main"))) {
                                                                    validate10.errors = [{ instancePath: instancePath + "/entryPoints/" + i6, schemaPath: "#/properties/entryPoints/items/required", keyword: "required", params: { missingProperty: missing5 }, message: "must have required property '" + missing5 + "'" }];
                                                                    return false;
                                                                }
                                                                else {
                                                                    const _errs68 = errors;
                                                                    for (const key4 in data26) {
                                                                        if (!((((((key4 === "type") || (key4 === "id")) || (key4 === "main")) || (key4 === "label")) || (key4 === "permissions")) || (key4 === "defaultSize"))) {
                                                                            validate10.errors = [{ instancePath: instancePath + "/entryPoints/" + i6, schemaPath: "#/properties/entryPoints/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key4 }, message: "must NOT have additional properties" }];
                                                                            return false;
                                                                            break;
                                                                        }
                                                                    }
                                                                    if (_errs68 === errors) {
                                                                        if (data26.type !== undefined) {
                                                                            let data27 = data26.type;
                                                                            const _errs69 = errors;
                                                                            if (errors === _errs69) {
                                                                                if (typeof data27 === "string") {
                                                                                    if (!pattern3.test(data27)) {
                                                                                        validate10.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/type", schemaPath: "#/properties/entryPoints/items/properties/type/pattern", keyword: "pattern", params: { pattern: "^(panel|share|content-hub)$" }, message: "must match pattern \"" + "^(panel|share|content-hub)$" + "\"" }];
                                                                                        return false;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    validate10.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/type", schemaPath: "#/properties/entryPoints/items/properties/type/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                    return false;
                                                                                }
                                                                            }
                                                                            var valid14 = _errs69 === errors;
                                                                        }
                                                                        else {
                                                                            var valid14 = true;
                                                                        }
                                                                        if (valid14) {
                                                                            if (data26.id !== undefined) {
                                                                                const _errs71 = errors;
                                                                                if (typeof data26.id !== "string") {
                                                                                    validate10.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/id", schemaPath: "#/properties/entryPoints/items/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                    return false;
                                                                                }
                                                                                var valid14 = _errs71 === errors;
                                                                            }
                                                                            else {
                                                                                var valid14 = true;
                                                                            }
                                                                            if (valid14) {
                                                                                if (data26.main !== undefined) {
                                                                                    const _errs73 = errors;
                                                                                    if (typeof data26.main !== "string") {
                                                                                        validate10.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/main", schemaPath: "#/properties/entryPoints/items/properties/main/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                        return false;
                                                                                    }
                                                                                    var valid14 = _errs73 === errors;
                                                                                }
                                                                                else {
                                                                                    var valid14 = true;
                                                                                }
                                                                                if (valid14) {
                                                                                    if (data26.label !== undefined) {
                                                                                        let data30 = data26.label;
                                                                                        const _errs75 = errors;
                                                                                        const _errs76 = errors;
                                                                                        let valid15 = false;
                                                                                        const _errs77 = errors;
                                                                                        if (typeof data30 !== "string") {
                                                                                            const err29 = { instancePath: instancePath + "/entryPoints/" + i6 + "/label", schemaPath: "#/properties/entryPoints/items/properties/label/anyOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                                            if (vErrors === null) {
                                                                                                vErrors = [err29];
                                                                                            }
                                                                                            else {
                                                                                                vErrors.push(err29);
                                                                                            }
                                                                                            errors++;
                                                                                        }
                                                                                        var _valid2 = _errs77 === errors;
                                                                                        valid15 = valid15 || _valid2;
                                                                                        if (!valid15) {
                                                                                            const _errs79 = errors;
                                                                                            if (errors === _errs79) {
                                                                                                if (data30 && typeof data30 == "object" && !Array.isArray(data30)) {
                                                                                                    let missing6;
                                                                                                    if ((data30.default === undefined) && (missing6 = "default")) {
                                                                                                        const err30 = { instancePath: instancePath + "/entryPoints/" + i6 + "/label", schemaPath: "#/properties/entryPoints/items/properties/label/anyOf/1/required", keyword: "required", params: { missingProperty: missing6 }, message: "must have required property '" + missing6 + "'" };
                                                                                                        if (vErrors === null) {
                                                                                                            vErrors = [err30];
                                                                                                        }
                                                                                                        else {
                                                                                                            vErrors.push(err30);
                                                                                                        }
                                                                                                        errors++;
                                                                                                    }
                                                                                                    else {
                                                                                                        if (data30.default !== undefined) {
                                                                                                            if (typeof data30.default !== "string") {
                                                                                                                const err31 = { instancePath: instancePath + "/entryPoints/" + i6 + "/label/default", schemaPath: "#/properties/entryPoints/items/properties/label/anyOf/1/properties/default/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                                                                if (vErrors === null) {
                                                                                                                    vErrors = [err31];
                                                                                                                }
                                                                                                                else {
                                                                                                                    vErrors.push(err31);
                                                                                                                }
                                                                                                                errors++;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    const err32 = { instancePath: instancePath + "/entryPoints/" + i6 + "/label", schemaPath: "#/properties/entryPoints/items/properties/label/anyOf/1/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                                                                                                    if (vErrors === null) {
                                                                                                        vErrors = [err32];
                                                                                                    }
                                                                                                    else {
                                                                                                        vErrors.push(err32);
                                                                                                    }
                                                                                                    errors++;
                                                                                                }
                                                                                            }
                                                                                            var _valid2 = _errs79 === errors;
                                                                                            valid15 = valid15 || _valid2;
                                                                                        }
                                                                                        if (!valid15) {
                                                                                            const err33 = { instancePath: instancePath + "/entryPoints/" + i6 + "/label", schemaPath: "#/properties/entryPoints/items/properties/label/anyOf", keyword: "anyOf", params: {}, message: "must match a schema in anyOf" };
                                                                                            if (vErrors === null) {
                                                                                                vErrors = [err33];
                                                                                            }
                                                                                            else {
                                                                                                vErrors.push(err33);
                                                                                            }
                                                                                            errors++;
                                                                                            validate10.errors = vErrors;
                                                                                            return false;
                                                                                        }
                                                                                        else {
                                                                                            errors = _errs76;
                                                                                            if (vErrors !== null) {
                                                                                                if (_errs76) {
                                                                                                    vErrors.length = _errs76;
                                                                                                }
                                                                                                else {
                                                                                                    vErrors = null;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        var valid14 = _errs75 === errors;
                                                                                    }
                                                                                    else {
                                                                                        var valid14 = true;
                                                                                    }
                                                                                    if (valid14) {
                                                                                        if (data26.permissions !== undefined) {
                                                                                            let data32 = data26.permissions;
                                                                                            const _errs84 = errors;
                                                                                            if (errors === _errs84) {
                                                                                                if (data32 && typeof data32 == "object" && !Array.isArray(data32)) {
                                                                                                    const _errs86 = errors;
                                                                                                    for (const key5 in data32) {
                                                                                                        if (!((((key5 === "sandbox") || (key5 === "oauth")) || (key5 === "microphone")) || (key5 === "camera"))) {
                                                                                                            validate10.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/permissions", schemaPath: "#/properties/entryPoints/items/properties/permissions/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key5 }, message: "must NOT have additional properties" }];
                                                                                                            return false;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    if (_errs86 === errors) {
                                                                                                        if (data32.sandbox !== undefined) {
                                                                                                            let data33 = data32.sandbox;
                                                                                                            const _errs87 = errors;
                                                                                                            if (errors === _errs87) {
                                                                                                                if (Array.isArray(data33)) {
                                                                                                                    var valid18 = true;
                                                                                                                    const len7 = data33.length;
                                                                                                                    for (let i7 = 0; i7 < len7; i7++) {
                                                                                                                        let data34 = data33[i7];
                                                                                                                        const _errs89 = errors;
                                                                                                                        if (errors === _errs89) {
                                                                                                                            if (typeof data34 === "string") {
                                                                                                                                if (!pattern4.test(data34)) {
                                                                                                                                    validate10.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/permissions/sandbox/" + i7, schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/sandbox/items/pattern", keyword: "pattern", params: { pattern: "^(allow-popups|allow-presentation|allow-downloads|allow-popups-to-escape-sandbox)$" }, message: "must match pattern \"" + "^(allow-popups|allow-presentation|allow-downloads|allow-popups-to-escape-sandbox)$" + "\"" }];
                                                                                                                                    return false;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                validate10.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/permissions/sandbox/" + i7, schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/sandbox/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                                return false;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        var valid18 = _errs89 === errors;
                                                                                                                        if (!valid18) {
                                                                                                                            break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    validate10.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/permissions/sandbox", schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/sandbox/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                                                                                    return false;
                                                                                                                }
                                                                                                            }
                                                                                                            var valid17 = _errs87 === errors;
                                                                                                        }
                                                                                                        else {
                                                                                                            var valid17 = true;
                                                                                                        }
                                                                                                        if (valid17) {
                                                                                                            if (data32.oauth !== undefined) {
                                                                                                                let data35 = data32.oauth;
                                                                                                                const _errs91 = errors;
                                                                                                                if (errors === _errs91) {
                                                                                                                    if (Array.isArray(data35)) {
                                                                                                                        var valid19 = true;
                                                                                                                        const len8 = data35.length;
                                                                                                                        for (let i8 = 0; i8 < len8; i8++) {
                                                                                                                            const _errs93 = errors;
                                                                                                                            if (typeof data35[i8] !== "string") {
                                                                                                                                validate10.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/permissions/oauth/" + i8, schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/oauth/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                                return false;
                                                                                                                            }
                                                                                                                            var valid19 = _errs93 === errors;
                                                                                                                            if (!valid19) {
                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        validate10.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/permissions/oauth", schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/oauth/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                                                                                        return false;
                                                                                                                    }
                                                                                                                }
                                                                                                                var valid17 = _errs91 === errors;
                                                                                                            }
                                                                                                            else {
                                                                                                                var valid17 = true;
                                                                                                            }
                                                                                                            if (valid17) {
                                                                                                                if (data32.microphone !== undefined) {
                                                                                                                    const _errs95 = errors;
                                                                                                                    if (typeof data32.microphone !== "string") {
                                                                                                                        validate10.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/permissions/microphone", schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/microphone/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                        return false;
                                                                                                                    }
                                                                                                                    var valid17 = _errs95 === errors;
                                                                                                                }
                                                                                                                else {
                                                                                                                    var valid17 = true;
                                                                                                                }
                                                                                                                if (valid17) {
                                                                                                                    if (data32.camera !== undefined) {
                                                                                                                        const _errs97 = errors;
                                                                                                                        if (typeof data32.camera !== "string") {
                                                                                                                            validate10.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/permissions/camera", schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/camera/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                            return false;
                                                                                                                        }
                                                                                                                        var valid17 = _errs97 === errors;
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        var valid17 = true;
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    validate10.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/permissions", schemaPath: "#/properties/entryPoints/items/properties/permissions/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                                    return false;
                                                                                                }
                                                                                            }
                                                                                            var valid14 = _errs84 === errors;
                                                                                        }
                                                                                        else {
                                                                                            var valid14 = true;
                                                                                        }
                                                                                        if (valid14) {
                                                                                            if (data26.defaultSize !== undefined) {
                                                                                                let data39 = data26.defaultSize;
                                                                                                const _errs99 = errors;
                                                                                                if (errors === _errs99) {
                                                                                                    if (data39 && typeof data39 == "object" && !Array.isArray(data39)) {
                                                                                                        let missing7;
                                                                                                        if (((data39.width === undefined) && (missing7 = "width")) || ((data39.height === undefined) && (missing7 = "height"))) {
                                                                                                            validate10.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/defaultSize", schemaPath: "#/properties/entryPoints/items/properties/defaultSize/required", keyword: "required", params: { missingProperty: missing7 }, message: "must have required property '" + missing7 + "'" }];
                                                                                                            return false;
                                                                                                        }
                                                                                                        else {
                                                                                                            const _errs101 = errors;
                                                                                                            for (const key6 in data39) {
                                                                                                                if (!((key6 === "width") || (key6 === "height"))) {
                                                                                                                    validate10.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/defaultSize", schemaPath: "#/properties/entryPoints/items/properties/defaultSize/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key6 }, message: "must NOT have additional properties" }];
                                                                                                                    return false;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            if (_errs101 === errors) {
                                                                                                                if (data39.width !== undefined) {
                                                                                                                    let data40 = data39.width;
                                                                                                                    const _errs102 = errors;
                                                                                                                    if (!((typeof data40 == "number") && (isFinite(data40)))) {
                                                                                                                        validate10.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/defaultSize/width", schemaPath: "#/properties/entryPoints/items/properties/defaultSize/properties/width/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                                                                                        return false;
                                                                                                                    }
                                                                                                                    var valid20 = _errs102 === errors;
                                                                                                                }
                                                                                                                else {
                                                                                                                    var valid20 = true;
                                                                                                                }
                                                                                                                if (valid20) {
                                                                                                                    if (data39.height !== undefined) {
                                                                                                                        let data41 = data39.height;
                                                                                                                        const _errs104 = errors;
                                                                                                                        if (!((typeof data41 == "number") && (isFinite(data41)))) {
                                                                                                                            validate10.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/defaultSize/height", schemaPath: "#/properties/entryPoints/items/properties/defaultSize/properties/height/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                                                                                            return false;
                                                                                                                        }
                                                                                                                        var valid20 = _errs104 === errors;
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        var valid20 = true;
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        validate10.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/defaultSize", schemaPath: "#/properties/entryPoints/items/properties/defaultSize/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                                        return false;
                                                                                                    }
                                                                                                }
                                                                                                var valid14 = _errs99 === errors;
                                                                                            }
                                                                                            else {
                                                                                                var valid14 = true;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else {
                                                                validate10.errors = [{ instancePath: instancePath + "/entryPoints/" + i6, schemaPath: "#/properties/entryPoints/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                return false;
                                                            }
                                                        }
                                                        var valid13 = _errs66 === errors;
                                                        if (!valid13) {
                                                            break;
                                                        }
                                                    }
                                                }
                                                else {
                                                    validate10.errors = [{ instancePath: instancePath + "/entryPoints", schemaPath: "#/properties/entryPoints/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                    return false;
                                                }
                                            }
                                            var valid0 = _errs64 === errors;
                                        }
                                        else {
                                            var valid0 = true;
                                        }
                                        if (valid0) {
                                            if (data.authorInfo !== undefined) {
                                                let data42 = data.authorInfo;
                                                const _errs106 = errors;
                                                if (errors === _errs106) {
                                                    if (data42 && typeof data42 == "object" && !Array.isArray(data42)) {
                                                        let missing8;
                                                        if (((data42.name === undefined) && (missing8 = "name")) || ((data42.email === undefined) && (missing8 = "email"))) {
                                                            validate10.errors = [{ instancePath: instancePath + "/authorInfo", schemaPath: "#/properties/authorInfo/required", keyword: "required", params: { missingProperty: missing8 }, message: "must have required property '" + missing8 + "'" }];
                                                            return false;
                                                        }
                                                        else {
                                                            const _errs108 = errors;
                                                            for (const key7 in data42) {
                                                                if (!(((key7 === "name") || (key7 === "email")) || (key7 === "url"))) {
                                                                    validate10.errors = [{ instancePath: instancePath + "/authorInfo", schemaPath: "#/properties/authorInfo/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key7 }, message: "must NOT have additional properties" }];
                                                                    return false;
                                                                    break;
                                                                }
                                                            }
                                                            if (_errs108 === errors) {
                                                                if (data42.name !== undefined) {
                                                                    const _errs109 = errors;
                                                                    if (typeof data42.name !== "string") {
                                                                        validate10.errors = [{ instancePath: instancePath + "/authorInfo/name", schemaPath: "#/properties/authorInfo/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                        return false;
                                                                    }
                                                                    var valid21 = _errs109 === errors;
                                                                }
                                                                else {
                                                                    var valid21 = true;
                                                                }
                                                                if (valid21) {
                                                                    if (data42.email !== undefined) {
                                                                        const _errs111 = errors;
                                                                        if (typeof data42.email !== "string") {
                                                                            validate10.errors = [{ instancePath: instancePath + "/authorInfo/email", schemaPath: "#/properties/authorInfo/properties/email/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                            return false;
                                                                        }
                                                                        var valid21 = _errs111 === errors;
                                                                    }
                                                                    else {
                                                                        var valid21 = true;
                                                                    }
                                                                    if (valid21) {
                                                                        if (data42.url !== undefined) {
                                                                            const _errs113 = errors;
                                                                            if (typeof data42.url !== "string") {
                                                                                validate10.errors = [{ instancePath: instancePath + "/authorInfo/url", schemaPath: "#/properties/authorInfo/properties/url/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                return false;
                                                                            }
                                                                            var valid21 = _errs113 === errors;
                                                                        }
                                                                        else {
                                                                            var valid21 = true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        validate10.errors = [{ instancePath: instancePath + "/authorInfo", schemaPath: "#/properties/authorInfo/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                        return false;
                                                    }
                                                }
                                                var valid0 = _errs106 === errors;
                                            }
                                            else {
                                                var valid0 = true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate10.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate10.errors = vErrors; return errors === 0; }
export const validateSchemaDeveloperV1 = validate11;
const schema12 = { "$id": "#/definitions/manifestSchemaDeveloperV1", "type": "object", "properties": { "id": { "type": "string" }, "name": { "anyOf": [{ "type": "string" }, { "type": "object", "properties": { "default": { "type": "string" } }, "required": ["default"], "additionalProperties": true }] }, "version": { "type": "string" }, "manifestVersion": { "type": "number" }, "requirements": { "type": "object", "properties": { "apps": { "type": "array", "items": { "type": "string", "pattern": "^(Express)$" } }, "experimentalApis": { "type": "boolean" } }, "required": ["apps"], "additionalProperties": false }, "icon": { "anyOf": [{ "type": "object", "properties": { "width": { "type": "number" }, "height": { "type": "number" }, "href": { "type": "string" }, "theme": { "type": "array", "items": { "type": "string", "pattern": "^(lightest|light|medium|dark|darkest|all)$" } }, "scale": { "type": "array", "items": { "type": "number" } } }, "required": ["href", "theme"], "additionalProperties": false }, { "type": "array", "items": { "type": "object", "properties": { "width": { "type": "number" }, "height": { "type": "number" }, "href": { "type": "string" }, "theme": { "type": "array", "items": { "type": "string", "pattern": "^(lightest|light|medium|dark|darkest|all)$" } }, "scale": { "type": "array", "items": { "type": "number" } } }, "required": ["href", "theme"], "additionalProperties": false } }] }, "entryPoints": { "type": "array", "items": { "type": "object", "properties": { "type": { "type": "string", "pattern": "^(panel|share|content-hub)$" }, "id": { "type": "string" }, "main": { "type": "string" }, "label": { "anyOf": [{ "type": "string" }, { "type": "object", "properties": { "default": { "type": "string" } }, "required": ["default"], "additionalProperties": true }] }, "permissions": { "type": "object", "properties": { "sandbox": { "type": "array", "items": { "type": "string", "pattern": "^(allow-popups|allow-presentation|allow-downloads|allow-popups-to-escape-sandbox)$" } }, "oauth": { "type": "array", "items": { "type": "string" } }, "microphone": { "type": "string" }, "camera": { "type": "string" } }, "required": [], "additionalProperties": false }, "defaultSize": { "type": "object", "properties": { "width": { "type": "number" }, "height": { "type": "number" } }, "required": ["width", "height"], "additionalProperties": false } }, "required": ["type", "id", "label", "main"], "additionalProperties": false } }, "externalURL": { "type": "string" }, "authorInfo": { "type": "object", "properties": { "name": { "type": "string" }, "email": { "type": "string" }, "url": { "type": "string" } }, "required": ["name", "email"], "additionalProperties": false } }, "required": ["id", "entryPoints"], "additionalProperties": true };
function validate11(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="#/definitions/manifestSchemaDeveloperV1" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.id === undefined) && (missing0 = "id")) || ((data.entryPoints === undefined) && (missing0 = "entryPoints"))) {
            validate11.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            if (data.id !== undefined) {
                const _errs2 = errors;
                if (typeof data.id !== "string") {
                    validate11.errors = [{ instancePath: instancePath + "/id", schemaPath: "#/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                    return false;
                }
                var valid0 = _errs2 === errors;
            }
            else {
                var valid0 = true;
            }
            if (valid0) {
                if (data.name !== undefined) {
                    let data1 = data.name;
                    const _errs4 = errors;
                    const _errs5 = errors;
                    let valid1 = false;
                    const _errs6 = errors;
                    if (typeof data1 !== "string") {
                        const err0 = { instancePath: instancePath + "/name", schemaPath: "#/properties/name/anyOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                        if (vErrors === null) {
                            vErrors = [err0];
                        }
                        else {
                            vErrors.push(err0);
                        }
                        errors++;
                    }
                    var _valid0 = _errs6 === errors;
                    valid1 = valid1 || _valid0;
                    if (!valid1) {
                        const _errs8 = errors;
                        if (errors === _errs8) {
                            if (data1 && typeof data1 == "object" && !Array.isArray(data1)) {
                                let missing1;
                                if ((data1.default === undefined) && (missing1 = "default")) {
                                    const err1 = { instancePath: instancePath + "/name", schemaPath: "#/properties/name/anyOf/1/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" };
                                    if (vErrors === null) {
                                        vErrors = [err1];
                                    }
                                    else {
                                        vErrors.push(err1);
                                    }
                                    errors++;
                                }
                                else {
                                    if (data1.default !== undefined) {
                                        if (typeof data1.default !== "string") {
                                            const err2 = { instancePath: instancePath + "/name/default", schemaPath: "#/properties/name/anyOf/1/properties/default/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                            if (vErrors === null) {
                                                vErrors = [err2];
                                            }
                                            else {
                                                vErrors.push(err2);
                                            }
                                            errors++;
                                        }
                                    }
                                }
                            }
                            else {
                                const err3 = { instancePath: instancePath + "/name", schemaPath: "#/properties/name/anyOf/1/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                                if (vErrors === null) {
                                    vErrors = [err3];
                                }
                                else {
                                    vErrors.push(err3);
                                }
                                errors++;
                            }
                        }
                        var _valid0 = _errs8 === errors;
                        valid1 = valid1 || _valid0;
                    }
                    if (!valid1) {
                        const err4 = { instancePath: instancePath + "/name", schemaPath: "#/properties/name/anyOf", keyword: "anyOf", params: {}, message: "must match a schema in anyOf" };
                        if (vErrors === null) {
                            vErrors = [err4];
                        }
                        else {
                            vErrors.push(err4);
                        }
                        errors++;
                        validate11.errors = vErrors;
                        return false;
                    }
                    else {
                        errors = _errs5;
                        if (vErrors !== null) {
                            if (_errs5) {
                                vErrors.length = _errs5;
                            }
                            else {
                                vErrors = null;
                            }
                        }
                    }
                    var valid0 = _errs4 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.version !== undefined) {
                        const _errs13 = errors;
                        if (typeof data.version !== "string") {
                            validate11.errors = [{ instancePath: instancePath + "/version", schemaPath: "#/properties/version/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                            return false;
                        }
                        var valid0 = _errs13 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.manifestVersion !== undefined) {
                            let data4 = data.manifestVersion;
                            const _errs15 = errors;
                            if (!((typeof data4 == "number") && (isFinite(data4)))) {
                                validate11.errors = [{ instancePath: instancePath + "/manifestVersion", schemaPath: "#/properties/manifestVersion/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                return false;
                            }
                            var valid0 = _errs15 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.requirements !== undefined) {
                                let data5 = data.requirements;
                                const _errs17 = errors;
                                if (errors === _errs17) {
                                    if (data5 && typeof data5 == "object" && !Array.isArray(data5)) {
                                        let missing2;
                                        if ((data5.apps === undefined) && (missing2 = "apps")) {
                                            validate11.errors = [{ instancePath: instancePath + "/requirements", schemaPath: "#/properties/requirements/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }];
                                            return false;
                                        }
                                        else {
                                            const _errs19 = errors;
                                            for (const key0 in data5) {
                                                if (!((key0 === "apps") || (key0 === "experimentalApis"))) {
                                                    validate11.errors = [{ instancePath: instancePath + "/requirements", schemaPath: "#/properties/requirements/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                                                    return false;
                                                    break;
                                                }
                                            }
                                            if (_errs19 === errors) {
                                                if (data5.apps !== undefined) {
                                                    let data6 = data5.apps;
                                                    const _errs20 = errors;
                                                    if (errors === _errs20) {
                                                        if (Array.isArray(data6)) {
                                                            var valid4 = true;
                                                            const len0 = data6.length;
                                                            for (let i0 = 0; i0 < len0; i0++) {
                                                                let data7 = data6[i0];
                                                                const _errs22 = errors;
                                                                if (errors === _errs22) {
                                                                    if (typeof data7 === "string") {
                                                                        if (!pattern0.test(data7)) {
                                                                            validate11.errors = [{ instancePath: instancePath + "/requirements/apps/" + i0, schemaPath: "#/properties/requirements/properties/apps/items/pattern", keyword: "pattern", params: { pattern: "^(Express)$" }, message: "must match pattern \"" + "^(Express)$" + "\"" }];
                                                                            return false;
                                                                        }
                                                                    }
                                                                    else {
                                                                        validate11.errors = [{ instancePath: instancePath + "/requirements/apps/" + i0, schemaPath: "#/properties/requirements/properties/apps/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                        return false;
                                                                    }
                                                                }
                                                                var valid4 = _errs22 === errors;
                                                                if (!valid4) {
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        else {
                                                            validate11.errors = [{ instancePath: instancePath + "/requirements/apps", schemaPath: "#/properties/requirements/properties/apps/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                            return false;
                                                        }
                                                    }
                                                    var valid3 = _errs20 === errors;
                                                }
                                                else {
                                                    var valid3 = true;
                                                }
                                                if (valid3) {
                                                    if (data5.experimentalApis !== undefined) {
                                                        const _errs24 = errors;
                                                        if (typeof data5.experimentalApis !== "boolean") {
                                                            validate11.errors = [{ instancePath: instancePath + "/requirements/experimentalApis", schemaPath: "#/properties/requirements/properties/experimentalApis/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                                            return false;
                                                        }
                                                        var valid3 = _errs24 === errors;
                                                    }
                                                    else {
                                                        var valid3 = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        validate11.errors = [{ instancePath: instancePath + "/requirements", schemaPath: "#/properties/requirements/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                        return false;
                                    }
                                }
                                var valid0 = _errs17 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                            if (valid0) {
                                if (data.icon !== undefined) {
                                    let data9 = data.icon;
                                    const _errs26 = errors;
                                    const _errs27 = errors;
                                    let valid5 = false;
                                    const _errs28 = errors;
                                    if (errors === _errs28) {
                                        if (data9 && typeof data9 == "object" && !Array.isArray(data9)) {
                                            let missing3;
                                            if (((data9.href === undefined) && (missing3 = "href")) || ((data9.theme === undefined) && (missing3 = "theme"))) {
                                                const err5 = { instancePath: instancePath + "/icon", schemaPath: "#/properties/icon/anyOf/0/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" };
                                                if (vErrors === null) {
                                                    vErrors = [err5];
                                                }
                                                else {
                                                    vErrors.push(err5);
                                                }
                                                errors++;
                                            }
                                            else {
                                                const _errs30 = errors;
                                                for (const key1 in data9) {
                                                    if (!(((((key1 === "width") || (key1 === "height")) || (key1 === "href")) || (key1 === "theme")) || (key1 === "scale"))) {
                                                        const err6 = { instancePath: instancePath + "/icon", schemaPath: "#/properties/icon/anyOf/0/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" };
                                                        if (vErrors === null) {
                                                            vErrors = [err6];
                                                        }
                                                        else {
                                                            vErrors.push(err6);
                                                        }
                                                        errors++;
                                                        break;
                                                    }
                                                }
                                                if (_errs30 === errors) {
                                                    if (data9.width !== undefined) {
                                                        let data10 = data9.width;
                                                        const _errs31 = errors;
                                                        if (!((typeof data10 == "number") && (isFinite(data10)))) {
                                                            const err7 = { instancePath: instancePath + "/icon/width", schemaPath: "#/properties/icon/anyOf/0/properties/width/type", keyword: "type", params: { type: "number" }, message: "must be number" };
                                                            if (vErrors === null) {
                                                                vErrors = [err7];
                                                            }
                                                            else {
                                                                vErrors.push(err7);
                                                            }
                                                            errors++;
                                                        }
                                                        var valid6 = _errs31 === errors;
                                                    }
                                                    else {
                                                        var valid6 = true;
                                                    }
                                                    if (valid6) {
                                                        if (data9.height !== undefined) {
                                                            let data11 = data9.height;
                                                            const _errs33 = errors;
                                                            if (!((typeof data11 == "number") && (isFinite(data11)))) {
                                                                const err8 = { instancePath: instancePath + "/icon/height", schemaPath: "#/properties/icon/anyOf/0/properties/height/type", keyword: "type", params: { type: "number" }, message: "must be number" };
                                                                if (vErrors === null) {
                                                                    vErrors = [err8];
                                                                }
                                                                else {
                                                                    vErrors.push(err8);
                                                                }
                                                                errors++;
                                                            }
                                                            var valid6 = _errs33 === errors;
                                                        }
                                                        else {
                                                            var valid6 = true;
                                                        }
                                                        if (valid6) {
                                                            if (data9.href !== undefined) {
                                                                const _errs35 = errors;
                                                                if (typeof data9.href !== "string") {
                                                                    const err9 = { instancePath: instancePath + "/icon/href", schemaPath: "#/properties/icon/anyOf/0/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                    if (vErrors === null) {
                                                                        vErrors = [err9];
                                                                    }
                                                                    else {
                                                                        vErrors.push(err9);
                                                                    }
                                                                    errors++;
                                                                }
                                                                var valid6 = _errs35 === errors;
                                                            }
                                                            else {
                                                                var valid6 = true;
                                                            }
                                                            if (valid6) {
                                                                if (data9.theme !== undefined) {
                                                                    let data13 = data9.theme;
                                                                    const _errs37 = errors;
                                                                    if (errors === _errs37) {
                                                                        if (Array.isArray(data13)) {
                                                                            var valid7 = true;
                                                                            const len1 = data13.length;
                                                                            for (let i1 = 0; i1 < len1; i1++) {
                                                                                let data14 = data13[i1];
                                                                                const _errs39 = errors;
                                                                                if (errors === _errs39) {
                                                                                    if (typeof data14 === "string") {
                                                                                        if (!pattern1.test(data14)) {
                                                                                            const err10 = { instancePath: instancePath + "/icon/theme/" + i1, schemaPath: "#/properties/icon/anyOf/0/properties/theme/items/pattern", keyword: "pattern", params: { pattern: "^(lightest|light|medium|dark|darkest|all)$" }, message: "must match pattern \"" + "^(lightest|light|medium|dark|darkest|all)$" + "\"" };
                                                                                            if (vErrors === null) {
                                                                                                vErrors = [err10];
                                                                                            }
                                                                                            else {
                                                                                                vErrors.push(err10);
                                                                                            }
                                                                                            errors++;
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        const err11 = { instancePath: instancePath + "/icon/theme/" + i1, schemaPath: "#/properties/icon/anyOf/0/properties/theme/items/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                                        if (vErrors === null) {
                                                                                            vErrors = [err11];
                                                                                        }
                                                                                        else {
                                                                                            vErrors.push(err11);
                                                                                        }
                                                                                        errors++;
                                                                                    }
                                                                                }
                                                                                var valid7 = _errs39 === errors;
                                                                                if (!valid7) {
                                                                                    break;
                                                                                }
                                                                            }
                                                                        }
                                                                        else {
                                                                            const err12 = { instancePath: instancePath + "/icon/theme", schemaPath: "#/properties/icon/anyOf/0/properties/theme/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                                                                            if (vErrors === null) {
                                                                                vErrors = [err12];
                                                                            }
                                                                            else {
                                                                                vErrors.push(err12);
                                                                            }
                                                                            errors++;
                                                                        }
                                                                    }
                                                                    var valid6 = _errs37 === errors;
                                                                }
                                                                else {
                                                                    var valid6 = true;
                                                                }
                                                                if (valid6) {
                                                                    if (data9.scale !== undefined) {
                                                                        let data15 = data9.scale;
                                                                        const _errs41 = errors;
                                                                        if (errors === _errs41) {
                                                                            if (Array.isArray(data15)) {
                                                                                var valid8 = true;
                                                                                const len2 = data15.length;
                                                                                for (let i2 = 0; i2 < len2; i2++) {
                                                                                    let data16 = data15[i2];
                                                                                    const _errs43 = errors;
                                                                                    if (!((typeof data16 == "number") && (isFinite(data16)))) {
                                                                                        const err13 = { instancePath: instancePath + "/icon/scale/" + i2, schemaPath: "#/properties/icon/anyOf/0/properties/scale/items/type", keyword: "type", params: { type: "number" }, message: "must be number" };
                                                                                        if (vErrors === null) {
                                                                                            vErrors = [err13];
                                                                                        }
                                                                                        else {
                                                                                            vErrors.push(err13);
                                                                                        }
                                                                                        errors++;
                                                                                    }
                                                                                    var valid8 = _errs43 === errors;
                                                                                    if (!valid8) {
                                                                                        break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else {
                                                                                const err14 = { instancePath: instancePath + "/icon/scale", schemaPath: "#/properties/icon/anyOf/0/properties/scale/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                                                                                if (vErrors === null) {
                                                                                    vErrors = [err14];
                                                                                }
                                                                                else {
                                                                                    vErrors.push(err14);
                                                                                }
                                                                                errors++;
                                                                            }
                                                                        }
                                                                        var valid6 = _errs41 === errors;
                                                                    }
                                                                    else {
                                                                        var valid6 = true;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            const err15 = { instancePath: instancePath + "/icon", schemaPath: "#/properties/icon/anyOf/0/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                                            if (vErrors === null) {
                                                vErrors = [err15];
                                            }
                                            else {
                                                vErrors.push(err15);
                                            }
                                            errors++;
                                        }
                                    }
                                    var _valid1 = _errs28 === errors;
                                    valid5 = valid5 || _valid1;
                                    if (!valid5) {
                                        const _errs45 = errors;
                                        if (errors === _errs45) {
                                            if (Array.isArray(data9)) {
                                                var valid9 = true;
                                                const len3 = data9.length;
                                                for (let i3 = 0; i3 < len3; i3++) {
                                                    let data17 = data9[i3];
                                                    const _errs47 = errors;
                                                    if (errors === _errs47) {
                                                        if (data17 && typeof data17 == "object" && !Array.isArray(data17)) {
                                                            let missing4;
                                                            if (((data17.href === undefined) && (missing4 = "href")) || ((data17.theme === undefined) && (missing4 = "theme"))) {
                                                                const err16 = { instancePath: instancePath + "/icon/" + i3, schemaPath: "#/properties/icon/anyOf/1/items/required", keyword: "required", params: { missingProperty: missing4 }, message: "must have required property '" + missing4 + "'" };
                                                                if (vErrors === null) {
                                                                    vErrors = [err16];
                                                                }
                                                                else {
                                                                    vErrors.push(err16);
                                                                }
                                                                errors++;
                                                            }
                                                            else {
                                                                const _errs49 = errors;
                                                                for (const key2 in data17) {
                                                                    if (!(((((key2 === "width") || (key2 === "height")) || (key2 === "href")) || (key2 === "theme")) || (key2 === "scale"))) {
                                                                        const err17 = { instancePath: instancePath + "/icon/" + i3, schemaPath: "#/properties/icon/anyOf/1/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" };
                                                                        if (vErrors === null) {
                                                                            vErrors = [err17];
                                                                        }
                                                                        else {
                                                                            vErrors.push(err17);
                                                                        }
                                                                        errors++;
                                                                        break;
                                                                    }
                                                                }
                                                                if (_errs49 === errors) {
                                                                    if (data17.width !== undefined) {
                                                                        let data18 = data17.width;
                                                                        const _errs50 = errors;
                                                                        if (!((typeof data18 == "number") && (isFinite(data18)))) {
                                                                            const err18 = { instancePath: instancePath + "/icon/" + i3 + "/width", schemaPath: "#/properties/icon/anyOf/1/items/properties/width/type", keyword: "type", params: { type: "number" }, message: "must be number" };
                                                                            if (vErrors === null) {
                                                                                vErrors = [err18];
                                                                            }
                                                                            else {
                                                                                vErrors.push(err18);
                                                                            }
                                                                            errors++;
                                                                        }
                                                                        var valid10 = _errs50 === errors;
                                                                    }
                                                                    else {
                                                                        var valid10 = true;
                                                                    }
                                                                    if (valid10) {
                                                                        if (data17.height !== undefined) {
                                                                            let data19 = data17.height;
                                                                            const _errs52 = errors;
                                                                            if (!((typeof data19 == "number") && (isFinite(data19)))) {
                                                                                const err19 = { instancePath: instancePath + "/icon/" + i3 + "/height", schemaPath: "#/properties/icon/anyOf/1/items/properties/height/type", keyword: "type", params: { type: "number" }, message: "must be number" };
                                                                                if (vErrors === null) {
                                                                                    vErrors = [err19];
                                                                                }
                                                                                else {
                                                                                    vErrors.push(err19);
                                                                                }
                                                                                errors++;
                                                                            }
                                                                            var valid10 = _errs52 === errors;
                                                                        }
                                                                        else {
                                                                            var valid10 = true;
                                                                        }
                                                                        if (valid10) {
                                                                            if (data17.href !== undefined) {
                                                                                const _errs54 = errors;
                                                                                if (typeof data17.href !== "string") {
                                                                                    const err20 = { instancePath: instancePath + "/icon/" + i3 + "/href", schemaPath: "#/properties/icon/anyOf/1/items/properties/href/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                                    if (vErrors === null) {
                                                                                        vErrors = [err20];
                                                                                    }
                                                                                    else {
                                                                                        vErrors.push(err20);
                                                                                    }
                                                                                    errors++;
                                                                                }
                                                                                var valid10 = _errs54 === errors;
                                                                            }
                                                                            else {
                                                                                var valid10 = true;
                                                                            }
                                                                            if (valid10) {
                                                                                if (data17.theme !== undefined) {
                                                                                    let data21 = data17.theme;
                                                                                    const _errs56 = errors;
                                                                                    if (errors === _errs56) {
                                                                                        if (Array.isArray(data21)) {
                                                                                            var valid11 = true;
                                                                                            const len4 = data21.length;
                                                                                            for (let i4 = 0; i4 < len4; i4++) {
                                                                                                let data22 = data21[i4];
                                                                                                const _errs58 = errors;
                                                                                                if (errors === _errs58) {
                                                                                                    if (typeof data22 === "string") {
                                                                                                        if (!pattern1.test(data22)) {
                                                                                                            const err21 = { instancePath: instancePath + "/icon/" + i3 + "/theme/" + i4, schemaPath: "#/properties/icon/anyOf/1/items/properties/theme/items/pattern", keyword: "pattern", params: { pattern: "^(lightest|light|medium|dark|darkest|all)$" }, message: "must match pattern \"" + "^(lightest|light|medium|dark|darkest|all)$" + "\"" };
                                                                                                            if (vErrors === null) {
                                                                                                                vErrors = [err21];
                                                                                                            }
                                                                                                            else {
                                                                                                                vErrors.push(err21);
                                                                                                            }
                                                                                                            errors++;
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        const err22 = { instancePath: instancePath + "/icon/" + i3 + "/theme/" + i4, schemaPath: "#/properties/icon/anyOf/1/items/properties/theme/items/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                                                        if (vErrors === null) {
                                                                                                            vErrors = [err22];
                                                                                                        }
                                                                                                        else {
                                                                                                            vErrors.push(err22);
                                                                                                        }
                                                                                                        errors++;
                                                                                                    }
                                                                                                }
                                                                                                var valid11 = _errs58 === errors;
                                                                                                if (!valid11) {
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            const err23 = { instancePath: instancePath + "/icon/" + i3 + "/theme", schemaPath: "#/properties/icon/anyOf/1/items/properties/theme/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                                                                                            if (vErrors === null) {
                                                                                                vErrors = [err23];
                                                                                            }
                                                                                            else {
                                                                                                vErrors.push(err23);
                                                                                            }
                                                                                            errors++;
                                                                                        }
                                                                                    }
                                                                                    var valid10 = _errs56 === errors;
                                                                                }
                                                                                else {
                                                                                    var valid10 = true;
                                                                                }
                                                                                if (valid10) {
                                                                                    if (data17.scale !== undefined) {
                                                                                        let data23 = data17.scale;
                                                                                        const _errs60 = errors;
                                                                                        if (errors === _errs60) {
                                                                                            if (Array.isArray(data23)) {
                                                                                                var valid12 = true;
                                                                                                const len5 = data23.length;
                                                                                                for (let i5 = 0; i5 < len5; i5++) {
                                                                                                    let data24 = data23[i5];
                                                                                                    const _errs62 = errors;
                                                                                                    if (!((typeof data24 == "number") && (isFinite(data24)))) {
                                                                                                        const err24 = { instancePath: instancePath + "/icon/" + i3 + "/scale/" + i5, schemaPath: "#/properties/icon/anyOf/1/items/properties/scale/items/type", keyword: "type", params: { type: "number" }, message: "must be number" };
                                                                                                        if (vErrors === null) {
                                                                                                            vErrors = [err24];
                                                                                                        }
                                                                                                        else {
                                                                                                            vErrors.push(err24);
                                                                                                        }
                                                                                                        errors++;
                                                                                                    }
                                                                                                    var valid12 = _errs62 === errors;
                                                                                                    if (!valid12) {
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                const err25 = { instancePath: instancePath + "/icon/" + i3 + "/scale", schemaPath: "#/properties/icon/anyOf/1/items/properties/scale/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                                                                                                if (vErrors === null) {
                                                                                                    vErrors = [err25];
                                                                                                }
                                                                                                else {
                                                                                                    vErrors.push(err25);
                                                                                                }
                                                                                                errors++;
                                                                                            }
                                                                                        }
                                                                                        var valid10 = _errs60 === errors;
                                                                                    }
                                                                                    else {
                                                                                        var valid10 = true;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else {
                                                            const err26 = { instancePath: instancePath + "/icon/" + i3, schemaPath: "#/properties/icon/anyOf/1/items/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                                                            if (vErrors === null) {
                                                                vErrors = [err26];
                                                            }
                                                            else {
                                                                vErrors.push(err26);
                                                            }
                                                            errors++;
                                                        }
                                                    }
                                                    var valid9 = _errs47 === errors;
                                                    if (!valid9) {
                                                        break;
                                                    }
                                                }
                                            }
                                            else {
                                                const err27 = { instancePath: instancePath + "/icon", schemaPath: "#/properties/icon/anyOf/1/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                                                if (vErrors === null) {
                                                    vErrors = [err27];
                                                }
                                                else {
                                                    vErrors.push(err27);
                                                }
                                                errors++;
                                            }
                                        }
                                        var _valid1 = _errs45 === errors;
                                        valid5 = valid5 || _valid1;
                                    }
                                    if (!valid5) {
                                        const err28 = { instancePath: instancePath + "/icon", schemaPath: "#/properties/icon/anyOf", keyword: "anyOf", params: {}, message: "must match a schema in anyOf" };
                                        if (vErrors === null) {
                                            vErrors = [err28];
                                        }
                                        else {
                                            vErrors.push(err28);
                                        }
                                        errors++;
                                        validate11.errors = vErrors;
                                        return false;
                                    }
                                    else {
                                        errors = _errs27;
                                        if (vErrors !== null) {
                                            if (_errs27) {
                                                vErrors.length = _errs27;
                                            }
                                            else {
                                                vErrors = null;
                                            }
                                        }
                                    }
                                    var valid0 = _errs26 === errors;
                                }
                                else {
                                    var valid0 = true;
                                }
                                if (valid0) {
                                    if (data.entryPoints !== undefined) {
                                        let data25 = data.entryPoints;
                                        const _errs64 = errors;
                                        if (errors === _errs64) {
                                            if (Array.isArray(data25)) {
                                                var valid13 = true;
                                                const len6 = data25.length;
                                                for (let i6 = 0; i6 < len6; i6++) {
                                                    let data26 = data25[i6];
                                                    const _errs66 = errors;
                                                    if (errors === _errs66) {
                                                        if (data26 && typeof data26 == "object" && !Array.isArray(data26)) {
                                                            let missing5;
                                                            if (((((data26.type === undefined) && (missing5 = "type")) || ((data26.id === undefined) && (missing5 = "id"))) || ((data26.label === undefined) && (missing5 = "label"))) || ((data26.main === undefined) && (missing5 = "main"))) {
                                                                validate11.errors = [{ instancePath: instancePath + "/entryPoints/" + i6, schemaPath: "#/properties/entryPoints/items/required", keyword: "required", params: { missingProperty: missing5 }, message: "must have required property '" + missing5 + "'" }];
                                                                return false;
                                                            }
                                                            else {
                                                                const _errs68 = errors;
                                                                for (const key3 in data26) {
                                                                    if (!((((((key3 === "type") || (key3 === "id")) || (key3 === "main")) || (key3 === "label")) || (key3 === "permissions")) || (key3 === "defaultSize"))) {
                                                                        validate11.errors = [{ instancePath: instancePath + "/entryPoints/" + i6, schemaPath: "#/properties/entryPoints/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }];
                                                                        return false;
                                                                        break;
                                                                    }
                                                                }
                                                                if (_errs68 === errors) {
                                                                    if (data26.type !== undefined) {
                                                                        let data27 = data26.type;
                                                                        const _errs69 = errors;
                                                                        if (errors === _errs69) {
                                                                            if (typeof data27 === "string") {
                                                                                if (!pattern3.test(data27)) {
                                                                                    validate11.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/type", schemaPath: "#/properties/entryPoints/items/properties/type/pattern", keyword: "pattern", params: { pattern: "^(panel|share|content-hub)$" }, message: "must match pattern \"" + "^(panel|share|content-hub)$" + "\"" }];
                                                                                    return false;
                                                                                }
                                                                            }
                                                                            else {
                                                                                validate11.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/type", schemaPath: "#/properties/entryPoints/items/properties/type/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                return false;
                                                                            }
                                                                        }
                                                                        var valid14 = _errs69 === errors;
                                                                    }
                                                                    else {
                                                                        var valid14 = true;
                                                                    }
                                                                    if (valid14) {
                                                                        if (data26.id !== undefined) {
                                                                            const _errs71 = errors;
                                                                            if (typeof data26.id !== "string") {
                                                                                validate11.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/id", schemaPath: "#/properties/entryPoints/items/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                return false;
                                                                            }
                                                                            var valid14 = _errs71 === errors;
                                                                        }
                                                                        else {
                                                                            var valid14 = true;
                                                                        }
                                                                        if (valid14) {
                                                                            if (data26.main !== undefined) {
                                                                                const _errs73 = errors;
                                                                                if (typeof data26.main !== "string") {
                                                                                    validate11.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/main", schemaPath: "#/properties/entryPoints/items/properties/main/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                    return false;
                                                                                }
                                                                                var valid14 = _errs73 === errors;
                                                                            }
                                                                            else {
                                                                                var valid14 = true;
                                                                            }
                                                                            if (valid14) {
                                                                                if (data26.label !== undefined) {
                                                                                    let data30 = data26.label;
                                                                                    const _errs75 = errors;
                                                                                    const _errs76 = errors;
                                                                                    let valid15 = false;
                                                                                    const _errs77 = errors;
                                                                                    if (typeof data30 !== "string") {
                                                                                        const err29 = { instancePath: instancePath + "/entryPoints/" + i6 + "/label", schemaPath: "#/properties/entryPoints/items/properties/label/anyOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                                        if (vErrors === null) {
                                                                                            vErrors = [err29];
                                                                                        }
                                                                                        else {
                                                                                            vErrors.push(err29);
                                                                                        }
                                                                                        errors++;
                                                                                    }
                                                                                    var _valid2 = _errs77 === errors;
                                                                                    valid15 = valid15 || _valid2;
                                                                                    if (!valid15) {
                                                                                        const _errs79 = errors;
                                                                                        if (errors === _errs79) {
                                                                                            if (data30 && typeof data30 == "object" && !Array.isArray(data30)) {
                                                                                                let missing6;
                                                                                                if ((data30.default === undefined) && (missing6 = "default")) {
                                                                                                    const err30 = { instancePath: instancePath + "/entryPoints/" + i6 + "/label", schemaPath: "#/properties/entryPoints/items/properties/label/anyOf/1/required", keyword: "required", params: { missingProperty: missing6 }, message: "must have required property '" + missing6 + "'" };
                                                                                                    if (vErrors === null) {
                                                                                                        vErrors = [err30];
                                                                                                    }
                                                                                                    else {
                                                                                                        vErrors.push(err30);
                                                                                                    }
                                                                                                    errors++;
                                                                                                }
                                                                                                else {
                                                                                                    if (data30.default !== undefined) {
                                                                                                        if (typeof data30.default !== "string") {
                                                                                                            const err31 = { instancePath: instancePath + "/entryPoints/" + i6 + "/label/default", schemaPath: "#/properties/entryPoints/items/properties/label/anyOf/1/properties/default/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                                                                            if (vErrors === null) {
                                                                                                                vErrors = [err31];
                                                                                                            }
                                                                                                            else {
                                                                                                                vErrors.push(err31);
                                                                                                            }
                                                                                                            errors++;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                const err32 = { instancePath: instancePath + "/entryPoints/" + i6 + "/label", schemaPath: "#/properties/entryPoints/items/properties/label/anyOf/1/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                                                                                                if (vErrors === null) {
                                                                                                    vErrors = [err32];
                                                                                                }
                                                                                                else {
                                                                                                    vErrors.push(err32);
                                                                                                }
                                                                                                errors++;
                                                                                            }
                                                                                        }
                                                                                        var _valid2 = _errs79 === errors;
                                                                                        valid15 = valid15 || _valid2;
                                                                                    }
                                                                                    if (!valid15) {
                                                                                        const err33 = { instancePath: instancePath + "/entryPoints/" + i6 + "/label", schemaPath: "#/properties/entryPoints/items/properties/label/anyOf", keyword: "anyOf", params: {}, message: "must match a schema in anyOf" };
                                                                                        if (vErrors === null) {
                                                                                            vErrors = [err33];
                                                                                        }
                                                                                        else {
                                                                                            vErrors.push(err33);
                                                                                        }
                                                                                        errors++;
                                                                                        validate11.errors = vErrors;
                                                                                        return false;
                                                                                    }
                                                                                    else {
                                                                                        errors = _errs76;
                                                                                        if (vErrors !== null) {
                                                                                            if (_errs76) {
                                                                                                vErrors.length = _errs76;
                                                                                            }
                                                                                            else {
                                                                                                vErrors = null;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    var valid14 = _errs75 === errors;
                                                                                }
                                                                                else {
                                                                                    var valid14 = true;
                                                                                }
                                                                                if (valid14) {
                                                                                    if (data26.permissions !== undefined) {
                                                                                        let data32 = data26.permissions;
                                                                                        const _errs84 = errors;
                                                                                        if (errors === _errs84) {
                                                                                            if (data32 && typeof data32 == "object" && !Array.isArray(data32)) {
                                                                                                const _errs86 = errors;
                                                                                                for (const key4 in data32) {
                                                                                                    if (!((((key4 === "sandbox") || (key4 === "oauth")) || (key4 === "microphone")) || (key4 === "camera"))) {
                                                                                                        validate11.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/permissions", schemaPath: "#/properties/entryPoints/items/properties/permissions/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key4 }, message: "must NOT have additional properties" }];
                                                                                                        return false;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                if (_errs86 === errors) {
                                                                                                    if (data32.sandbox !== undefined) {
                                                                                                        let data33 = data32.sandbox;
                                                                                                        const _errs87 = errors;
                                                                                                        if (errors === _errs87) {
                                                                                                            if (Array.isArray(data33)) {
                                                                                                                var valid18 = true;
                                                                                                                const len7 = data33.length;
                                                                                                                for (let i7 = 0; i7 < len7; i7++) {
                                                                                                                    let data34 = data33[i7];
                                                                                                                    const _errs89 = errors;
                                                                                                                    if (errors === _errs89) {
                                                                                                                        if (typeof data34 === "string") {
                                                                                                                            if (!pattern4.test(data34)) {
                                                                                                                                validate11.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/permissions/sandbox/" + i7, schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/sandbox/items/pattern", keyword: "pattern", params: { pattern: "^(allow-popups|allow-presentation|allow-downloads|allow-popups-to-escape-sandbox)$" }, message: "must match pattern \"" + "^(allow-popups|allow-presentation|allow-downloads|allow-popups-to-escape-sandbox)$" + "\"" }];
                                                                                                                                return false;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            validate11.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/permissions/sandbox/" + i7, schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/sandbox/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                            return false;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    var valid18 = _errs89 === errors;
                                                                                                                    if (!valid18) {
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                validate11.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/permissions/sandbox", schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/sandbox/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                                                                                return false;
                                                                                                            }
                                                                                                        }
                                                                                                        var valid17 = _errs87 === errors;
                                                                                                    }
                                                                                                    else {
                                                                                                        var valid17 = true;
                                                                                                    }
                                                                                                    if (valid17) {
                                                                                                        if (data32.oauth !== undefined) {
                                                                                                            let data35 = data32.oauth;
                                                                                                            const _errs91 = errors;
                                                                                                            if (errors === _errs91) {
                                                                                                                if (Array.isArray(data35)) {
                                                                                                                    var valid19 = true;
                                                                                                                    const len8 = data35.length;
                                                                                                                    for (let i8 = 0; i8 < len8; i8++) {
                                                                                                                        const _errs93 = errors;
                                                                                                                        if (typeof data35[i8] !== "string") {
                                                                                                                            validate11.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/permissions/oauth/" + i8, schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/oauth/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                            return false;
                                                                                                                        }
                                                                                                                        var valid19 = _errs93 === errors;
                                                                                                                        if (!valid19) {
                                                                                                                            break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    validate11.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/permissions/oauth", schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/oauth/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                                                                                    return false;
                                                                                                                }
                                                                                                            }
                                                                                                            var valid17 = _errs91 === errors;
                                                                                                        }
                                                                                                        else {
                                                                                                            var valid17 = true;
                                                                                                        }
                                                                                                        if (valid17) {
                                                                                                            if (data32.microphone !== undefined) {
                                                                                                                const _errs95 = errors;
                                                                                                                if (typeof data32.microphone !== "string") {
                                                                                                                    validate11.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/permissions/microphone", schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/microphone/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                    return false;
                                                                                                                }
                                                                                                                var valid17 = _errs95 === errors;
                                                                                                            }
                                                                                                            else {
                                                                                                                var valid17 = true;
                                                                                                            }
                                                                                                            if (valid17) {
                                                                                                                if (data32.camera !== undefined) {
                                                                                                                    const _errs97 = errors;
                                                                                                                    if (typeof data32.camera !== "string") {
                                                                                                                        validate11.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/permissions/camera", schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/camera/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                        return false;
                                                                                                                    }
                                                                                                                    var valid17 = _errs97 === errors;
                                                                                                                }
                                                                                                                else {
                                                                                                                    var valid17 = true;
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                validate11.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/permissions", schemaPath: "#/properties/entryPoints/items/properties/permissions/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                                return false;
                                                                                            }
                                                                                        }
                                                                                        var valid14 = _errs84 === errors;
                                                                                    }
                                                                                    else {
                                                                                        var valid14 = true;
                                                                                    }
                                                                                    if (valid14) {
                                                                                        if (data26.defaultSize !== undefined) {
                                                                                            let data39 = data26.defaultSize;
                                                                                            const _errs99 = errors;
                                                                                            if (errors === _errs99) {
                                                                                                if (data39 && typeof data39 == "object" && !Array.isArray(data39)) {
                                                                                                    let missing7;
                                                                                                    if (((data39.width === undefined) && (missing7 = "width")) || ((data39.height === undefined) && (missing7 = "height"))) {
                                                                                                        validate11.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/defaultSize", schemaPath: "#/properties/entryPoints/items/properties/defaultSize/required", keyword: "required", params: { missingProperty: missing7 }, message: "must have required property '" + missing7 + "'" }];
                                                                                                        return false;
                                                                                                    }
                                                                                                    else {
                                                                                                        const _errs101 = errors;
                                                                                                        for (const key5 in data39) {
                                                                                                            if (!((key5 === "width") || (key5 === "height"))) {
                                                                                                                validate11.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/defaultSize", schemaPath: "#/properties/entryPoints/items/properties/defaultSize/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key5 }, message: "must NOT have additional properties" }];
                                                                                                                return false;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        if (_errs101 === errors) {
                                                                                                            if (data39.width !== undefined) {
                                                                                                                let data40 = data39.width;
                                                                                                                const _errs102 = errors;
                                                                                                                if (!((typeof data40 == "number") && (isFinite(data40)))) {
                                                                                                                    validate11.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/defaultSize/width", schemaPath: "#/properties/entryPoints/items/properties/defaultSize/properties/width/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                                                                                    return false;
                                                                                                                }
                                                                                                                var valid20 = _errs102 === errors;
                                                                                                            }
                                                                                                            else {
                                                                                                                var valid20 = true;
                                                                                                            }
                                                                                                            if (valid20) {
                                                                                                                if (data39.height !== undefined) {
                                                                                                                    let data41 = data39.height;
                                                                                                                    const _errs104 = errors;
                                                                                                                    if (!((typeof data41 == "number") && (isFinite(data41)))) {
                                                                                                                        validate11.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/defaultSize/height", schemaPath: "#/properties/entryPoints/items/properties/defaultSize/properties/height/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                                                                                        return false;
                                                                                                                    }
                                                                                                                    var valid20 = _errs104 === errors;
                                                                                                                }
                                                                                                                else {
                                                                                                                    var valid20 = true;
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    validate11.errors = [{ instancePath: instancePath + "/entryPoints/" + i6 + "/defaultSize", schemaPath: "#/properties/entryPoints/items/properties/defaultSize/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                                    return false;
                                                                                                }
                                                                                            }
                                                                                            var valid14 = _errs99 === errors;
                                                                                        }
                                                                                        else {
                                                                                            var valid14 = true;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else {
                                                            validate11.errors = [{ instancePath: instancePath + "/entryPoints/" + i6, schemaPath: "#/properties/entryPoints/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                            return false;
                                                        }
                                                    }
                                                    var valid13 = _errs66 === errors;
                                                    if (!valid13) {
                                                        break;
                                                    }
                                                }
                                            }
                                            else {
                                                validate11.errors = [{ instancePath: instancePath + "/entryPoints", schemaPath: "#/properties/entryPoints/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                return false;
                                            }
                                        }
                                        var valid0 = _errs64 === errors;
                                    }
                                    else {
                                        var valid0 = true;
                                    }
                                    if (valid0) {
                                        if (data.externalURL !== undefined) {
                                            const _errs106 = errors;
                                            if (typeof data.externalURL !== "string") {
                                                validate11.errors = [{ instancePath: instancePath + "/externalURL", schemaPath: "#/properties/externalURL/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                            var valid0 = _errs106 === errors;
                                        }
                                        else {
                                            var valid0 = true;
                                        }
                                        if (valid0) {
                                            if (data.authorInfo !== undefined) {
                                                let data43 = data.authorInfo;
                                                const _errs108 = errors;
                                                if (errors === _errs108) {
                                                    if (data43 && typeof data43 == "object" && !Array.isArray(data43)) {
                                                        let missing8;
                                                        if (((data43.name === undefined) && (missing8 = "name")) || ((data43.email === undefined) && (missing8 = "email"))) {
                                                            validate11.errors = [{ instancePath: instancePath + "/authorInfo", schemaPath: "#/properties/authorInfo/required", keyword: "required", params: { missingProperty: missing8 }, message: "must have required property '" + missing8 + "'" }];
                                                            return false;
                                                        }
                                                        else {
                                                            const _errs110 = errors;
                                                            for (const key6 in data43) {
                                                                if (!(((key6 === "name") || (key6 === "email")) || (key6 === "url"))) {
                                                                    validate11.errors = [{ instancePath: instancePath + "/authorInfo", schemaPath: "#/properties/authorInfo/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key6 }, message: "must NOT have additional properties" }];
                                                                    return false;
                                                                    break;
                                                                }
                                                            }
                                                            if (_errs110 === errors) {
                                                                if (data43.name !== undefined) {
                                                                    const _errs111 = errors;
                                                                    if (typeof data43.name !== "string") {
                                                                        validate11.errors = [{ instancePath: instancePath + "/authorInfo/name", schemaPath: "#/properties/authorInfo/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                        return false;
                                                                    }
                                                                    var valid21 = _errs111 === errors;
                                                                }
                                                                else {
                                                                    var valid21 = true;
                                                                }
                                                                if (valid21) {
                                                                    if (data43.email !== undefined) {
                                                                        const _errs113 = errors;
                                                                        if (typeof data43.email !== "string") {
                                                                            validate11.errors = [{ instancePath: instancePath + "/authorInfo/email", schemaPath: "#/properties/authorInfo/properties/email/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                            return false;
                                                                        }
                                                                        var valid21 = _errs113 === errors;
                                                                    }
                                                                    else {
                                                                        var valid21 = true;
                                                                    }
                                                                    if (valid21) {
                                                                        if (data43.url !== undefined) {
                                                                            const _errs115 = errors;
                                                                            if (typeof data43.url !== "string") {
                                                                                validate11.errors = [{ instancePath: instancePath + "/authorInfo/url", schemaPath: "#/properties/authorInfo/properties/url/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                return false;
                                                                            }
                                                                            var valid21 = _errs115 === errors;
                                                                        }
                                                                        else {
                                                                            var valid21 = true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        validate11.errors = [{ instancePath: instancePath + "/authorInfo", schemaPath: "#/properties/authorInfo/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                        return false;
                                                    }
                                                }
                                                var valid0 = _errs108 === errors;
                                            }
                                            else {
                                                var valid0 = true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate11.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate11.errors = vErrors; return errors === 0; }
export const validateSchemaV2 = validate12;
const schema13 = { "$id": "#/definitions/manifestSchemaV2", "type": "object", "properties": { "testId": { "type": "string" }, "name": { "type": "string", "pattern": "^[a-zA-Z0-9]+[a-zA-Z0-9 ]{2,44}$" }, "version": { "type": "string", "pattern": "^[0-9]+.[0-9]+.[0-9]+$" }, "manifestVersion": { "type": "number" }, "requirements": { "type": "object", "properties": { "apps": { "type": "array", "items": { "type": "object", "properties": { "name": { "type": "string", "pattern": "^(Express)$" }, "apiVersion": { "type": "number" }, "supportedDeviceClass": { "type": "array", "items": { "type": "string", "pattern": "^(desktop|mobile|app)$" } } }, "required": ["name", "apiVersion"], "additionalProperties": false } }, "experimentalApis": { "type": "boolean" }, "supportsTouch": { "type": "boolean" }, "renditionPreview": { "type": "boolean" }, "privilegedApis": { "type": "boolean" }, "_blessedPartnerAccess": { "type": "string" }, "trustedPartnerApis": { "type": "object", "properties": { "messaging": { "type": "boolean" }, "expressPrint": { "type": "boolean" }, "toastNotifications": { "type": "boolean" }, "addOnLifecycle": { "type": "boolean" }, "tiktokcml": { "type": "boolean" } }, "required": [], "additionalProperties": false } }, "required": ["apps"], "additionalProperties": false }, "entryPoints": { "type": "array", "items": { "type": "object", "properties": { "type": { "type": "string", "pattern": "^(panel|share|content-hub)$" }, "id": { "type": "string" }, "main": { "type": "string" }, "script": { "type": "string" }, "documentSandbox": { "type": "string" }, "hostDomain": { "type": "string" }, "permissions": { "type": "object", "properties": { "sandbox": { "type": "array", "items": { "type": "string", "pattern": "^(allow-popups|allow-presentation|allow-downloads|allow-popups-to-escape-sandbox)$" } }, "oauth": { "type": "array", "items": { "type": "string" } }, "microphone": { "type": "string" }, "camera": { "type": "string" }, "clipboard": { "type": "array", "items": { "type": "string", "pattern": "^(clipboard-write|clipboard-read)$" } } }, "required": [], "additionalProperties": false }, "defaultSize": { "type": "object", "properties": { "width": { "type": "number" }, "height": { "type": "number" } }, "required": ["width", "height"], "additionalProperties": false }, "discoverable": { "type": "boolean" } }, "required": ["type", "id", "main"], "additionalProperties": false } } }, "required": ["version", "manifestVersion", "requirements", "entryPoints"], "additionalProperties": true };
const pattern10 = new RegExp("^[a-zA-Z0-9]+[a-zA-Z0-9 ]{2,44}$", "u");
const pattern11 = new RegExp("^[0-9]+.[0-9]+.[0-9]+$", "u");
const pattern13 = new RegExp("^(desktop|mobile|app)$", "u");
const pattern16 = new RegExp("^(clipboard-write|clipboard-read)$", "u");
const func2 = Object.prototype.hasOwnProperty;
function validate12(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { /*# sourceURL="#/definitions/manifestSchemaV2" */ ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((((data.version === undefined) && (missing0 = "version")) || ((data.manifestVersion === undefined) && (missing0 = "manifestVersion"))) || ((data.requirements === undefined) && (missing0 = "requirements"))) || ((data.entryPoints === undefined) && (missing0 = "entryPoints"))) {
            validate12.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            if (data.testId !== undefined) {
                const _errs2 = errors;
                if (typeof data.testId !== "string") {
                    validate12.errors = [{ instancePath: instancePath + "/testId", schemaPath: "#/properties/testId/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                    return false;
                }
                var valid0 = _errs2 === errors;
            }
            else {
                var valid0 = true;
            }
            if (valid0) {
                if (data.name !== undefined) {
                    let data1 = data.name;
                    const _errs4 = errors;
                    if (errors === _errs4) {
                        if (typeof data1 === "string") {
                            if (!pattern10.test(data1)) {
                                validate12.errors = [{ instancePath: instancePath + "/name", schemaPath: "#/properties/name/pattern", keyword: "pattern", params: { pattern: "^[a-zA-Z0-9]+[a-zA-Z0-9 ]{2,44}$" }, message: "must match pattern \"" + "^[a-zA-Z0-9]+[a-zA-Z0-9 ]{2,44}$" + "\"" }];
                                return false;
                            }
                        }
                        else {
                            validate12.errors = [{ instancePath: instancePath + "/name", schemaPath: "#/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                            return false;
                        }
                    }
                    var valid0 = _errs4 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.version !== undefined) {
                        let data2 = data.version;
                        const _errs6 = errors;
                        if (errors === _errs6) {
                            if (typeof data2 === "string") {
                                if (!pattern11.test(data2)) {
                                    validate12.errors = [{ instancePath: instancePath + "/version", schemaPath: "#/properties/version/pattern", keyword: "pattern", params: { pattern: "^[0-9]+.[0-9]+.[0-9]+$" }, message: "must match pattern \"" + "^[0-9]+.[0-9]+.[0-9]+$" + "\"" }];
                                    return false;
                                }
                            }
                            else {
                                validate12.errors = [{ instancePath: instancePath + "/version", schemaPath: "#/properties/version/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                        }
                        var valid0 = _errs6 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.manifestVersion !== undefined) {
                            let data3 = data.manifestVersion;
                            const _errs8 = errors;
                            if (!((typeof data3 == "number") && (isFinite(data3)))) {
                                validate12.errors = [{ instancePath: instancePath + "/manifestVersion", schemaPath: "#/properties/manifestVersion/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                return false;
                            }
                            var valid0 = _errs8 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.requirements !== undefined) {
                                let data4 = data.requirements;
                                const _errs10 = errors;
                                if (errors === _errs10) {
                                    if (data4 && typeof data4 == "object" && !Array.isArray(data4)) {
                                        let missing1;
                                        if ((data4.apps === undefined) && (missing1 = "apps")) {
                                            validate12.errors = [{ instancePath: instancePath + "/requirements", schemaPath: "#/properties/requirements/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" }];
                                            return false;
                                        }
                                        else {
                                            const _errs12 = errors;
                                            for (const key0 in data4) {
                                                if (!(((((((key0 === "apps") || (key0 === "experimentalApis")) || (key0 === "supportsTouch")) || (key0 === "renditionPreview")) || (key0 === "privilegedApis")) || (key0 === "_blessedPartnerAccess")) || (key0 === "trustedPartnerApis"))) {
                                                    validate12.errors = [{ instancePath: instancePath + "/requirements", schemaPath: "#/properties/requirements/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key0 }, message: "must NOT have additional properties" }];
                                                    return false;
                                                    break;
                                                }
                                            }
                                            if (_errs12 === errors) {
                                                if (data4.apps !== undefined) {
                                                    let data5 = data4.apps;
                                                    const _errs13 = errors;
                                                    if (errors === _errs13) {
                                                        if (Array.isArray(data5)) {
                                                            var valid2 = true;
                                                            const len0 = data5.length;
                                                            for (let i0 = 0; i0 < len0; i0++) {
                                                                let data6 = data5[i0];
                                                                const _errs15 = errors;
                                                                if (errors === _errs15) {
                                                                    if (data6 && typeof data6 == "object" && !Array.isArray(data6)) {
                                                                        let missing2;
                                                                        if (((data6.name === undefined) && (missing2 = "name")) || ((data6.apiVersion === undefined) && (missing2 = "apiVersion"))) {
                                                                            validate12.errors = [{ instancePath: instancePath + "/requirements/apps/" + i0, schemaPath: "#/properties/requirements/properties/apps/items/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" }];
                                                                            return false;
                                                                        }
                                                                        else {
                                                                            const _errs17 = errors;
                                                                            for (const key1 in data6) {
                                                                                if (!(((key1 === "name") || (key1 === "apiVersion")) || (key1 === "supportedDeviceClass"))) {
                                                                                    validate12.errors = [{ instancePath: instancePath + "/requirements/apps/" + i0, schemaPath: "#/properties/requirements/properties/apps/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key1 }, message: "must NOT have additional properties" }];
                                                                                    return false;
                                                                                    break;
                                                                                }
                                                                            }
                                                                            if (_errs17 === errors) {
                                                                                if (data6.name !== undefined) {
                                                                                    let data7 = data6.name;
                                                                                    const _errs18 = errors;
                                                                                    if (errors === _errs18) {
                                                                                        if (typeof data7 === "string") {
                                                                                            if (!pattern0.test(data7)) {
                                                                                                validate12.errors = [{ instancePath: instancePath + "/requirements/apps/" + i0 + "/name", schemaPath: "#/properties/requirements/properties/apps/items/properties/name/pattern", keyword: "pattern", params: { pattern: "^(Express)$" }, message: "must match pattern \"" + "^(Express)$" + "\"" }];
                                                                                                return false;
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            validate12.errors = [{ instancePath: instancePath + "/requirements/apps/" + i0 + "/name", schemaPath: "#/properties/requirements/properties/apps/items/properties/name/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                            return false;
                                                                                        }
                                                                                    }
                                                                                    var valid3 = _errs18 === errors;
                                                                                }
                                                                                else {
                                                                                    var valid3 = true;
                                                                                }
                                                                                if (valid3) {
                                                                                    if (data6.apiVersion !== undefined) {
                                                                                        let data8 = data6.apiVersion;
                                                                                        const _errs20 = errors;
                                                                                        if (!((typeof data8 == "number") && (isFinite(data8)))) {
                                                                                            validate12.errors = [{ instancePath: instancePath + "/requirements/apps/" + i0 + "/apiVersion", schemaPath: "#/properties/requirements/properties/apps/items/properties/apiVersion/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                                                            return false;
                                                                                        }
                                                                                        var valid3 = _errs20 === errors;
                                                                                    }
                                                                                    else {
                                                                                        var valid3 = true;
                                                                                    }
                                                                                    if (valid3) {
                                                                                        if (data6.supportedDeviceClass !== undefined) {
                                                                                            let data9 = data6.supportedDeviceClass;
                                                                                            const _errs22 = errors;
                                                                                            if (errors === _errs22) {
                                                                                                if (Array.isArray(data9)) {
                                                                                                    var valid4 = true;
                                                                                                    const len1 = data9.length;
                                                                                                    for (let i1 = 0; i1 < len1; i1++) {
                                                                                                        let data10 = data9[i1];
                                                                                                        const _errs24 = errors;
                                                                                                        if (errors === _errs24) {
                                                                                                            if (typeof data10 === "string") {
                                                                                                                if (!pattern13.test(data10)) {
                                                                                                                    validate12.errors = [{ instancePath: instancePath + "/requirements/apps/" + i0 + "/supportedDeviceClass/" + i1, schemaPath: "#/properties/requirements/properties/apps/items/properties/supportedDeviceClass/items/pattern", keyword: "pattern", params: { pattern: "^(desktop|mobile|app)$" }, message: "must match pattern \"" + "^(desktop|mobile|app)$" + "\"" }];
                                                                                                                    return false;
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                validate12.errors = [{ instancePath: instancePath + "/requirements/apps/" + i0 + "/supportedDeviceClass/" + i1, schemaPath: "#/properties/requirements/properties/apps/items/properties/supportedDeviceClass/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                return false;
                                                                                                            }
                                                                                                        }
                                                                                                        var valid4 = _errs24 === errors;
                                                                                                        if (!valid4) {
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    validate12.errors = [{ instancePath: instancePath + "/requirements/apps/" + i0 + "/supportedDeviceClass", schemaPath: "#/properties/requirements/properties/apps/items/properties/supportedDeviceClass/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                                                                    return false;
                                                                                                }
                                                                                            }
                                                                                            var valid3 = _errs22 === errors;
                                                                                        }
                                                                                        else {
                                                                                            var valid3 = true;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    else {
                                                                        validate12.errors = [{ instancePath: instancePath + "/requirements/apps/" + i0, schemaPath: "#/properties/requirements/properties/apps/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                        return false;
                                                                    }
                                                                }
                                                                var valid2 = _errs15 === errors;
                                                                if (!valid2) {
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        else {
                                                            validate12.errors = [{ instancePath: instancePath + "/requirements/apps", schemaPath: "#/properties/requirements/properties/apps/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                            return false;
                                                        }
                                                    }
                                                    var valid1 = _errs13 === errors;
                                                }
                                                else {
                                                    var valid1 = true;
                                                }
                                                if (valid1) {
                                                    if (data4.experimentalApis !== undefined) {
                                                        const _errs26 = errors;
                                                        if (typeof data4.experimentalApis !== "boolean") {
                                                            validate12.errors = [{ instancePath: instancePath + "/requirements/experimentalApis", schemaPath: "#/properties/requirements/properties/experimentalApis/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                                            return false;
                                                        }
                                                        var valid1 = _errs26 === errors;
                                                    }
                                                    else {
                                                        var valid1 = true;
                                                    }
                                                    if (valid1) {
                                                        if (data4.supportsTouch !== undefined) {
                                                            const _errs28 = errors;
                                                            if (typeof data4.supportsTouch !== "boolean") {
                                                                validate12.errors = [{ instancePath: instancePath + "/requirements/supportsTouch", schemaPath: "#/properties/requirements/properties/supportsTouch/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                                                return false;
                                                            }
                                                            var valid1 = _errs28 === errors;
                                                        }
                                                        else {
                                                            var valid1 = true;
                                                        }
                                                        if (valid1) {
                                                            if (data4.renditionPreview !== undefined) {
                                                                const _errs30 = errors;
                                                                if (typeof data4.renditionPreview !== "boolean") {
                                                                    validate12.errors = [{ instancePath: instancePath + "/requirements/renditionPreview", schemaPath: "#/properties/requirements/properties/renditionPreview/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                                                    return false;
                                                                }
                                                                var valid1 = _errs30 === errors;
                                                            }
                                                            else {
                                                                var valid1 = true;
                                                            }
                                                            if (valid1) {
                                                                if (data4.privilegedApis !== undefined) {
                                                                    const _errs32 = errors;
                                                                    if (typeof data4.privilegedApis !== "boolean") {
                                                                        validate12.errors = [{ instancePath: instancePath + "/requirements/privilegedApis", schemaPath: "#/properties/requirements/properties/privilegedApis/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                                                        return false;
                                                                    }
                                                                    var valid1 = _errs32 === errors;
                                                                }
                                                                else {
                                                                    var valid1 = true;
                                                                }
                                                                if (valid1) {
                                                                    if (data4._blessedPartnerAccess !== undefined) {
                                                                        const _errs34 = errors;
                                                                        if (typeof data4._blessedPartnerAccess !== "string") {
                                                                            validate12.errors = [{ instancePath: instancePath + "/requirements/_blessedPartnerAccess", schemaPath: "#/properties/requirements/properties/_blessedPartnerAccess/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                            return false;
                                                                        }
                                                                        var valid1 = _errs34 === errors;
                                                                    }
                                                                    else {
                                                                        var valid1 = true;
                                                                    }
                                                                    if (valid1) {
                                                                        if (data4.trustedPartnerApis !== undefined) {
                                                                            let data16 = data4.trustedPartnerApis;
                                                                            const _errs36 = errors;
                                                                            if (errors === _errs36) {
                                                                                if (data16 && typeof data16 == "object" && !Array.isArray(data16)) {
                                                                                    const _errs38 = errors;
                                                                                    for (const key2 in data16) {
                                                                                        if (!(((((key2 === "messaging") || (key2 === "expressPrint")) || (key2 === "toastNotifications")) || (key2 === "addOnLifecycle")) || (key2 === "tiktokcml"))) {
                                                                                            validate12.errors = [{ instancePath: instancePath + "/requirements/trustedPartnerApis", schemaPath: "#/properties/requirements/properties/trustedPartnerApis/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key2 }, message: "must NOT have additional properties" }];
                                                                                            return false;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    if (_errs38 === errors) {
                                                                                        if (data16.messaging !== undefined) {
                                                                                            const _errs39 = errors;
                                                                                            if (typeof data16.messaging !== "boolean") {
                                                                                                validate12.errors = [{ instancePath: instancePath + "/requirements/trustedPartnerApis/messaging", schemaPath: "#/properties/requirements/properties/trustedPartnerApis/properties/messaging/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                                                                                return false;
                                                                                            }
                                                                                            var valid5 = _errs39 === errors;
                                                                                        }
                                                                                        else {
                                                                                            var valid5 = true;
                                                                                        }
                                                                                        if (valid5) {
                                                                                            if (data16.expressPrint !== undefined) {
                                                                                                const _errs41 = errors;
                                                                                                if (typeof data16.expressPrint !== "boolean") {
                                                                                                    validate12.errors = [{ instancePath: instancePath + "/requirements/trustedPartnerApis/expressPrint", schemaPath: "#/properties/requirements/properties/trustedPartnerApis/properties/expressPrint/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                                                                                    return false;
                                                                                                }
                                                                                                var valid5 = _errs41 === errors;
                                                                                            }
                                                                                            else {
                                                                                                var valid5 = true;
                                                                                            }
                                                                                            if (valid5) {
                                                                                                if (data16.toastNotifications !== undefined) {
                                                                                                    const _errs43 = errors;
                                                                                                    if (typeof data16.toastNotifications !== "boolean") {
                                                                                                        validate12.errors = [{ instancePath: instancePath + "/requirements/trustedPartnerApis/toastNotifications", schemaPath: "#/properties/requirements/properties/trustedPartnerApis/properties/toastNotifications/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                                                                                        return false;
                                                                                                    }
                                                                                                    var valid5 = _errs43 === errors;
                                                                                                }
                                                                                                else {
                                                                                                    var valid5 = true;
                                                                                                }
                                                                                                if (valid5) {
                                                                                                    if (data16.addOnLifecycle !== undefined) {
                                                                                                        const _errs45 = errors;
                                                                                                        if (typeof data16.addOnLifecycle !== "boolean") {
                                                                                                            validate12.errors = [{ instancePath: instancePath + "/requirements/trustedPartnerApis/addOnLifecycle", schemaPath: "#/properties/requirements/properties/trustedPartnerApis/properties/addOnLifecycle/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                                                                                            return false;
                                                                                                        }
                                                                                                        var valid5 = _errs45 === errors;
                                                                                                    }
                                                                                                    else {
                                                                                                        var valid5 = true;
                                                                                                    }
                                                                                                    if (valid5) {
                                                                                                        if (data16.tiktokcml !== undefined) {
                                                                                                            const _errs47 = errors;
                                                                                                            if (typeof data16.tiktokcml !== "boolean") {
                                                                                                                validate12.errors = [{ instancePath: instancePath + "/requirements/trustedPartnerApis/tiktokcml", schemaPath: "#/properties/requirements/properties/trustedPartnerApis/properties/tiktokcml/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                                                                                                return false;
                                                                                                            }
                                                                                                            var valid5 = _errs47 === errors;
                                                                                                        }
                                                                                                        else {
                                                                                                            var valid5 = true;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    validate12.errors = [{ instancePath: instancePath + "/requirements/trustedPartnerApis", schemaPath: "#/properties/requirements/properties/trustedPartnerApis/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                    return false;
                                                                                }
                                                                            }
                                                                            var valid1 = _errs36 === errors;
                                                                        }
                                                                        else {
                                                                            var valid1 = true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        validate12.errors = [{ instancePath: instancePath + "/requirements", schemaPath: "#/properties/requirements/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                        return false;
                                    }
                                }
                                var valid0 = _errs10 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                            if (valid0) {
                                if (data.entryPoints !== undefined) {
                                    let data22 = data.entryPoints;
                                    const _errs49 = errors;
                                    if (errors === _errs49) {
                                        if (Array.isArray(data22)) {
                                            var valid6 = true;
                                            const len2 = data22.length;
                                            for (let i2 = 0; i2 < len2; i2++) {
                                                let data23 = data22[i2];
                                                const _errs51 = errors;
                                                if (errors === _errs51) {
                                                    if (data23 && typeof data23 == "object" && !Array.isArray(data23)) {
                                                        let missing3;
                                                        if ((((data23.type === undefined) && (missing3 = "type")) || ((data23.id === undefined) && (missing3 = "id"))) || ((data23.main === undefined) && (missing3 = "main"))) {
                                                            validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2, schemaPath: "#/properties/entryPoints/items/required", keyword: "required", params: { missingProperty: missing3 }, message: "must have required property '" + missing3 + "'" }];
                                                            return false;
                                                        }
                                                        else {
                                                            const _errs53 = errors;
                                                            for (const key3 in data23) {
                                                                if (!(func2.call(schema13.properties.entryPoints.items.properties, key3))) {
                                                                    validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2, schemaPath: "#/properties/entryPoints/items/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key3 }, message: "must NOT have additional properties" }];
                                                                    return false;
                                                                    break;
                                                                }
                                                            }
                                                            if (_errs53 === errors) {
                                                                if (data23.type !== undefined) {
                                                                    let data24 = data23.type;
                                                                    const _errs54 = errors;
                                                                    if (errors === _errs54) {
                                                                        if (typeof data24 === "string") {
                                                                            if (!pattern3.test(data24)) {
                                                                                validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/type", schemaPath: "#/properties/entryPoints/items/properties/type/pattern", keyword: "pattern", params: { pattern: "^(panel|share|content-hub)$" }, message: "must match pattern \"" + "^(panel|share|content-hub)$" + "\"" }];
                                                                                return false;
                                                                            }
                                                                        }
                                                                        else {
                                                                            validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/type", schemaPath: "#/properties/entryPoints/items/properties/type/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                            return false;
                                                                        }
                                                                    }
                                                                    var valid7 = _errs54 === errors;
                                                                }
                                                                else {
                                                                    var valid7 = true;
                                                                }
                                                                if (valid7) {
                                                                    if (data23.id !== undefined) {
                                                                        const _errs56 = errors;
                                                                        if (typeof data23.id !== "string") {
                                                                            validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/id", schemaPath: "#/properties/entryPoints/items/properties/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                            return false;
                                                                        }
                                                                        var valid7 = _errs56 === errors;
                                                                    }
                                                                    else {
                                                                        var valid7 = true;
                                                                    }
                                                                    if (valid7) {
                                                                        if (data23.main !== undefined) {
                                                                            const _errs58 = errors;
                                                                            if (typeof data23.main !== "string") {
                                                                                validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/main", schemaPath: "#/properties/entryPoints/items/properties/main/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                return false;
                                                                            }
                                                                            var valid7 = _errs58 === errors;
                                                                        }
                                                                        else {
                                                                            var valid7 = true;
                                                                        }
                                                                        if (valid7) {
                                                                            if (data23.script !== undefined) {
                                                                                const _errs60 = errors;
                                                                                if (typeof data23.script !== "string") {
                                                                                    validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/script", schemaPath: "#/properties/entryPoints/items/properties/script/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                    return false;
                                                                                }
                                                                                var valid7 = _errs60 === errors;
                                                                            }
                                                                            else {
                                                                                var valid7 = true;
                                                                            }
                                                                            if (valid7) {
                                                                                if (data23.documentSandbox !== undefined) {
                                                                                    const _errs62 = errors;
                                                                                    if (typeof data23.documentSandbox !== "string") {
                                                                                        validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/documentSandbox", schemaPath: "#/properties/entryPoints/items/properties/documentSandbox/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                        return false;
                                                                                    }
                                                                                    var valid7 = _errs62 === errors;
                                                                                }
                                                                                else {
                                                                                    var valid7 = true;
                                                                                }
                                                                                if (valid7) {
                                                                                    if (data23.hostDomain !== undefined) {
                                                                                        const _errs64 = errors;
                                                                                        if (typeof data23.hostDomain !== "string") {
                                                                                            validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/hostDomain", schemaPath: "#/properties/entryPoints/items/properties/hostDomain/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                            return false;
                                                                                        }
                                                                                        var valid7 = _errs64 === errors;
                                                                                    }
                                                                                    else {
                                                                                        var valid7 = true;
                                                                                    }
                                                                                    if (valid7) {
                                                                                        if (data23.permissions !== undefined) {
                                                                                            let data30 = data23.permissions;
                                                                                            const _errs66 = errors;
                                                                                            if (errors === _errs66) {
                                                                                                if (data30 && typeof data30 == "object" && !Array.isArray(data30)) {
                                                                                                    const _errs68 = errors;
                                                                                                    for (const key4 in data30) {
                                                                                                        if (!(((((key4 === "sandbox") || (key4 === "oauth")) || (key4 === "microphone")) || (key4 === "camera")) || (key4 === "clipboard"))) {
                                                                                                            validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/permissions", schemaPath: "#/properties/entryPoints/items/properties/permissions/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key4 }, message: "must NOT have additional properties" }];
                                                                                                            return false;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    if (_errs68 === errors) {
                                                                                                        if (data30.sandbox !== undefined) {
                                                                                                            let data31 = data30.sandbox;
                                                                                                            const _errs69 = errors;
                                                                                                            if (errors === _errs69) {
                                                                                                                if (Array.isArray(data31)) {
                                                                                                                    var valid9 = true;
                                                                                                                    const len3 = data31.length;
                                                                                                                    for (let i3 = 0; i3 < len3; i3++) {
                                                                                                                        let data32 = data31[i3];
                                                                                                                        const _errs71 = errors;
                                                                                                                        if (errors === _errs71) {
                                                                                                                            if (typeof data32 === "string") {
                                                                                                                                if (!pattern4.test(data32)) {
                                                                                                                                    validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/permissions/sandbox/" + i3, schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/sandbox/items/pattern", keyword: "pattern", params: { pattern: "^(allow-popups|allow-presentation|allow-downloads|allow-popups-to-escape-sandbox)$" }, message: "must match pattern \"" + "^(allow-popups|allow-presentation|allow-downloads|allow-popups-to-escape-sandbox)$" + "\"" }];
                                                                                                                                    return false;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/permissions/sandbox/" + i3, schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/sandbox/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                                return false;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        var valid9 = _errs71 === errors;
                                                                                                                        if (!valid9) {
                                                                                                                            break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else {
                                                                                                                    validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/permissions/sandbox", schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/sandbox/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                                                                                    return false;
                                                                                                                }
                                                                                                            }
                                                                                                            var valid8 = _errs69 === errors;
                                                                                                        }
                                                                                                        else {
                                                                                                            var valid8 = true;
                                                                                                        }
                                                                                                        if (valid8) {
                                                                                                            if (data30.oauth !== undefined) {
                                                                                                                let data33 = data30.oauth;
                                                                                                                const _errs73 = errors;
                                                                                                                if (errors === _errs73) {
                                                                                                                    if (Array.isArray(data33)) {
                                                                                                                        var valid10 = true;
                                                                                                                        const len4 = data33.length;
                                                                                                                        for (let i4 = 0; i4 < len4; i4++) {
                                                                                                                            const _errs75 = errors;
                                                                                                                            if (typeof data33[i4] !== "string") {
                                                                                                                                validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/permissions/oauth/" + i4, schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/oauth/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                                return false;
                                                                                                                            }
                                                                                                                            var valid10 = _errs75 === errors;
                                                                                                                            if (!valid10) {
                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/permissions/oauth", schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/oauth/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                                                                                        return false;
                                                                                                                    }
                                                                                                                }
                                                                                                                var valid8 = _errs73 === errors;
                                                                                                            }
                                                                                                            else {
                                                                                                                var valid8 = true;
                                                                                                            }
                                                                                                            if (valid8) {
                                                                                                                if (data30.microphone !== undefined) {
                                                                                                                    const _errs77 = errors;
                                                                                                                    if (typeof data30.microphone !== "string") {
                                                                                                                        validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/permissions/microphone", schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/microphone/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                        return false;
                                                                                                                    }
                                                                                                                    var valid8 = _errs77 === errors;
                                                                                                                }
                                                                                                                else {
                                                                                                                    var valid8 = true;
                                                                                                                }
                                                                                                                if (valid8) {
                                                                                                                    if (data30.camera !== undefined) {
                                                                                                                        const _errs79 = errors;
                                                                                                                        if (typeof data30.camera !== "string") {
                                                                                                                            validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/permissions/camera", schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/camera/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                            return false;
                                                                                                                        }
                                                                                                                        var valid8 = _errs79 === errors;
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        var valid8 = true;
                                                                                                                    }
                                                                                                                    if (valid8) {
                                                                                                                        if (data30.clipboard !== undefined) {
                                                                                                                            let data37 = data30.clipboard;
                                                                                                                            const _errs81 = errors;
                                                                                                                            if (errors === _errs81) {
                                                                                                                                if (Array.isArray(data37)) {
                                                                                                                                    var valid11 = true;
                                                                                                                                    const len5 = data37.length;
                                                                                                                                    for (let i5 = 0; i5 < len5; i5++) {
                                                                                                                                        let data38 = data37[i5];
                                                                                                                                        const _errs83 = errors;
                                                                                                                                        if (errors === _errs83) {
                                                                                                                                            if (typeof data38 === "string") {
                                                                                                                                                if (!pattern16.test(data38)) {
                                                                                                                                                    validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/permissions/clipboard/" + i5, schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/clipboard/items/pattern", keyword: "pattern", params: { pattern: "^(clipboard-write|clipboard-read)$" }, message: "must match pattern \"" + "^(clipboard-write|clipboard-read)$" + "\"" }];
                                                                                                                                                    return false;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/permissions/clipboard/" + i5, schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/clipboard/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                                                                                                return false;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        var valid11 = _errs83 === errors;
                                                                                                                                        if (!valid11) {
                                                                                                                                            break;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/permissions/clipboard", schemaPath: "#/properties/entryPoints/items/properties/permissions/properties/clipboard/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                                                                                                                    return false;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            var valid8 = _errs81 === errors;
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            var valid8 = true;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/permissions", schemaPath: "#/properties/entryPoints/items/properties/permissions/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                                    return false;
                                                                                                }
                                                                                            }
                                                                                            var valid7 = _errs66 === errors;
                                                                                        }
                                                                                        else {
                                                                                            var valid7 = true;
                                                                                        }
                                                                                        if (valid7) {
                                                                                            if (data23.defaultSize !== undefined) {
                                                                                                let data39 = data23.defaultSize;
                                                                                                const _errs85 = errors;
                                                                                                if (errors === _errs85) {
                                                                                                    if (data39 && typeof data39 == "object" && !Array.isArray(data39)) {
                                                                                                        let missing4;
                                                                                                        if (((data39.width === undefined) && (missing4 = "width")) || ((data39.height === undefined) && (missing4 = "height"))) {
                                                                                                            validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/defaultSize", schemaPath: "#/properties/entryPoints/items/properties/defaultSize/required", keyword: "required", params: { missingProperty: missing4 }, message: "must have required property '" + missing4 + "'" }];
                                                                                                            return false;
                                                                                                        }
                                                                                                        else {
                                                                                                            const _errs87 = errors;
                                                                                                            for (const key5 in data39) {
                                                                                                                if (!((key5 === "width") || (key5 === "height"))) {
                                                                                                                    validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/defaultSize", schemaPath: "#/properties/entryPoints/items/properties/defaultSize/additionalProperties", keyword: "additionalProperties", params: { additionalProperty: key5 }, message: "must NOT have additional properties" }];
                                                                                                                    return false;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            if (_errs87 === errors) {
                                                                                                                if (data39.width !== undefined) {
                                                                                                                    let data40 = data39.width;
                                                                                                                    const _errs88 = errors;
                                                                                                                    if (!((typeof data40 == "number") && (isFinite(data40)))) {
                                                                                                                        validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/defaultSize/width", schemaPath: "#/properties/entryPoints/items/properties/defaultSize/properties/width/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                                                                                        return false;
                                                                                                                    }
                                                                                                                    var valid12 = _errs88 === errors;
                                                                                                                }
                                                                                                                else {
                                                                                                                    var valid12 = true;
                                                                                                                }
                                                                                                                if (valid12) {
                                                                                                                    if (data39.height !== undefined) {
                                                                                                                        let data41 = data39.height;
                                                                                                                        const _errs90 = errors;
                                                                                                                        if (!((typeof data41 == "number") && (isFinite(data41)))) {
                                                                                                                            validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/defaultSize/height", schemaPath: "#/properties/entryPoints/items/properties/defaultSize/properties/height/type", keyword: "type", params: { type: "number" }, message: "must be number" }];
                                                                                                                            return false;
                                                                                                                        }
                                                                                                                        var valid12 = _errs90 === errors;
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        var valid12 = true;
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/defaultSize", schemaPath: "#/properties/entryPoints/items/properties/defaultSize/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                                                                        return false;
                                                                                                    }
                                                                                                }
                                                                                                var valid7 = _errs85 === errors;
                                                                                            }
                                                                                            else {
                                                                                                var valid7 = true;
                                                                                            }
                                                                                            if (valid7) {
                                                                                                if (data23.discoverable !== undefined) {
                                                                                                    const _errs92 = errors;
                                                                                                    if (typeof data23.discoverable !== "boolean") {
                                                                                                        validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2 + "/discoverable", schemaPath: "#/properties/entryPoints/items/properties/discoverable/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" }];
                                                                                                        return false;
                                                                                                    }
                                                                                                    var valid7 = _errs92 === errors;
                                                                                                }
                                                                                                else {
                                                                                                    var valid7 = true;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        validate12.errors = [{ instancePath: instancePath + "/entryPoints/" + i2, schemaPath: "#/properties/entryPoints/items/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
                                                        return false;
                                                    }
                                                }
                                                var valid6 = _errs51 === errors;
                                                if (!valid6) {
                                                    break;
                                                }
                                            }
                                        }
                                        else {
                                            validate12.errors = [{ instancePath: instancePath + "/entryPoints", schemaPath: "#/properties/entryPoints/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                                            return false;
                                        }
                                    }
                                    var valid0 = _errs49 === errors;
                                }
                                else {
                                    var valid0 = true;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate12.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate12.errors = vErrors; return errors === 0; }
//# sourceMappingURL=validateManifestSchema.mjs.map