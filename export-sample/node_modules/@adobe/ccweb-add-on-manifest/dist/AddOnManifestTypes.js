/********************************************************************************
 * MIT License

 * Â© Copyright 2023 Adobe. All rights reserved.

 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 ********************************************************************************/
/**
 * Note: This enum expects values wrt manifest permission properties to support iframe allow permissions.
 */
export var Allow;
(function (Allow) {
    Allow["camera"] = "camera";
    Allow["microphone"] = "microphone";
    Allow["clipboard"] = "clipboard";
})(Allow || (Allow = {}));
export var EntrypointType;
(function (EntrypointType) {
    EntrypointType["WIDGET"] = "widget";
    EntrypointType["COMMAND"] = "command";
    EntrypointType["PANEL"] = "panel";
    EntrypointType["SHARE"] = "share";
    EntrypointType["CONTENT_HUB"] = "content-hub";
})(EntrypointType || (EntrypointType = {}));
/**
 * Defines the Error Type other than avj libray validations for the Manifest
 */
export const OTHER_MANIFEST_ERRORS = {
    ManifestVersionType: {
        instancePath: "/manifestVersion",
        message: "Manifest version should be a number"
    },
    InvalidManifestVersion: {
        instancePath: "/manifestVersion",
        message: "Invalid manifest version"
    },
    EmptyEntrypoint: {
        instancePath: "/entryPoints",
        message: "At least one entrypoint should be defined"
    },
    EmptyIcon: {
        instancePath: "/icon",
        message: "At least one icon should be defined"
    },
    TestIdRequired: {
        instancePath: "/testId",
        message: "testId should be defined in manifest for developer workflow"
    },
    InvalidClipboardPermission: {
        instancePath: "/entryPoints/permissions/clipboard",
        message: "Clipboard read permission is not allowed for this AddOn"
    },
    RestrictedPrivilegedApis: {
        instancePath: "/requirements/privilegedApis",
        message: "Privileged apis are not allowed for this add-on"
    },
    AdditionPropertyExperimentalApis: {
        instancePath: "/requirements/experimentalApis",
        message: "Experimental apis are not supported for production add-ons"
    },
    DocumentSandboxWithScript: {
        instancePath: "/entryPoints/documentSandbox",
        message: "Manifest entrypoint should have either 'documentSandbox' or 'script', not both"
    },
    InvalidHostDomain: {
        instancePath: "/entryPoints/hostDomain",
        message: "Manifest entrypoint should have valid hostDomain"
    },
    RestrictedContentHubEntrypoint: {
        instancePath: "/entryPoints/type",
        message: "Entrypoint type 'content-hub' is allowed only for privileged add-ons"
    }
};
export var AddOnLogLevel;
(function (AddOnLogLevel) {
    AddOnLogLevel["information"] = "information";
    AddOnLogLevel["warning"] = "warning";
    AddOnLogLevel["error"] = "error";
})(AddOnLogLevel || (AddOnLogLevel = {}));
export function isIframeEntryPointType(entryPointType) {
    return (entryPointType === EntrypointType.PANEL ||
        entryPointType === EntrypointType.WIDGET ||
        entryPointType === EntrypointType.SHARE ||
        entryPointType === EntrypointType.CONTENT_HUB);
}
//# sourceMappingURL=AddOnManifestTypes.js.map